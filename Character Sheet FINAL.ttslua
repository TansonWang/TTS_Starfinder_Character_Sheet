--[[    Character Sheet Template    by: Herp and Derp (the Dynamic Duo), with
acknowledgements to the original template creator, MrStump]]

--Set this to true while editing and false when you have finished
disableSave = false
--Remember to set this to false once you are done making changes
--Then, after you save & apply it, save your game too

--Color information for button text (r,g,b, values of 0-1)
buttonFontColor = {0,0,0}
--Color information for button background
buttonColor = {1,1,1}
--Change scale of button (Avoid changing if possible)
buttonScale = {0.1,0.1,0.1}

-- This is all the default data. Any data that is stored in variables here under
-- the name ref_buttonData.yourData will persist between reloads.
defaultButtonData = {
    currentConditions = {
    },

    conditionEffects = {
      asleep = {
        other = {'helpless'},
        perception = -10,
      },
      bleeding = {},
      blinded = {
        other = {'flatfooted'},
        STRSkills = -4,
        DEXSkills = -4,
        perception = -4,
        perceptionHearing = -99
      },
      broken = {},
      burning = {},
      confused = {},
      cowering = {
        other = {'flatfooted'},
      },
      dazed = {},
      dazzled = {
        attackRolls = -1,
        perceptionSight = -1,
      },
      dead = {},
      deafened = {
        INIT = -4,
        perception = -4,
        perceptionHearing = -99
      },
      dying = {},
      encumbered = {
        maxDEX = 'r2',
        speed = -10,
        ACP = 'r-5',
        STRAbilityChecks = -5,
        DEXAbilityChecks = -5,
      },
      entangled = {
        speed = 'm0.5',
        AC = -2,
        attackRolls = -2,
        REF = -2,
        INIT = -2,
        DEXChecks = -2,
      },
      exhausted = {
        quashes  = {'fatigued'},
        speed = 'm0.5',
        AC = -3,
        attackRolls = -3,
        meleeDamage = -3,
        thrownDamage = -3,
        INIT = -3,
        REF = -3,
        DEXChecks = -3,
        STRChecks = -3,
        encumberedBulk = -3,
      },
      fascinated = {
        perception = -4,
      },
      fatigued = {
        AC = -1,
        attackRolls = -1,
        meleeDamage = -1,
        REF = -1,
        INIT = -1,
        DEXChecks = -1,
        STRChecks = -1,
        encumberedBulk = -1,
      },
      flatfooted = {
        AC = -2
      },
      frightened = {
        attackRolls = -2,
        saves = -2,
        checks = -2,
      },
      grappled = {
        AC = -2,
        attackRolls = -2,
        REF = -2,
        INIT = -2,
        DEXChecks = -2,
        grapple = 2,
        acrobaticsEscape = 2
      },
      helpless = {
        DEX = 'r0',
        MAC = -4
      },
      nauseated = {},
      offkilter = {
        other = {'flatfooted'},
        attackRolls = -2,
      },
      offtarget = {
        attackRolls = -2
      },
      overburdened = {
        quashes = {'encumbered'},
        speed = 'r5',
        maxDEX = 'r0',
        REF = -5,
        ACP = 'r-5',
        STRAbilityChecks = -5,
        DEXAbilityChecks = -5,
      },
      panicked = {
        saves = -2,
        checks = -2,
      },
      paralyzed = {
        DEX = 'r0',
      },
      pinned = {
        other = {'flatfooted'},
        quashes = {'grappled'},
        speed = 'r0',
        AC = -4,
        attackRolls = -4,
        REF = -4,
        INIT = -4,
        DEXChecks = -4,
      },
      prone = {
        RAC = 4,
        MAC = -4,
        meleeAttackRolls = -4,
      },
      shaken = {
        attackRolls = -2,
        saves = -2,
        checks = -2,
      },
      sickened = {
        attackRolls = -2,
        weaponDamage = -2,
        saves = -2,
        checks = -2,
      },
      stable = {},
      staggered = {},
      stunned = {
        other = {'flatfooted'},
      },
      unconscious = {
        other = {'helpless'},
      }
    },
    --Add checkboxes
    checkbox = {
        --[[
        pos   = the position (pasted from the helper tool)
        size  = height/width/font_size for checkbox
        state = default starting value for checkbox (true=checked, false=not)
        label = tooltip
        ]]
        -- Acrobatics
        {
            pos   = {0.626, 0.1, -1.183},
            size  = 300,
            state = false,
            label = "acrobaticsCS"
        },
        -- Athletics
        {
            pos   = {0.626, 0.1, -1.085},
            size  = 300,
            state = false,
            label = "athleticsCS"
        },
        -- Bluff
        {
            pos   = {0.626, 0.1, -0.994},
            size  = 300,
            state = false,
            label = "bluffCS"
        },
        -- Computers
        {
            pos   = {0.626, 0.1, -0.895},
            size  = 300,
            state = false,
            label = "computersCS"
        },
        -- Culture
        {
            pos   = {0.626, 0.1, -0.8},
            size  = 300,
            state = false,
            label = "cultureCS"
        },
        -- Diplomacy
        {
            pos   = {0.626, 0.1, -0.701},
            size  = 300,
            state = false,
            label = "diplomacyCS"
        },
        -- Disguise
        {
            pos   = {0.626, 0.1, -0.604},
            size  = 300,
            state = false,
            label = "disguiseCS"
        },
        -- Engineering
        {
            pos   = {0.626, 0.1, -0.508},
            size  = 300,
            state = false,
            label = "engineeringCS"
        },
        -- Intimidate
        {
            pos   = {0.626, 0.1, -0.414},
            size  = 300,
            state = false,
            label = "intimidateCS"
        },
        -- Life Science
        {
            pos   = {0.626, 0.1, -0.317},
            size  = 300,
            state = false,
            label = "lifeScienceCS"
        },
        -- Medicine
        {
            pos   = {0.626, 0.1, -0.215},
            size  = 300,
            state = false,
            label = "medicineCS"
        },
        -- Mysticism
        {
            pos   = {0.626, 0.1, -0.119},
            size  = 300,
            state = false,
            label = "mysticismCS"
        },
        -- Perception
        {
            pos   = {0.626, 0.1, -0.016},
            size  = 300,
            state = false,
            label = "perceptionCS"
        },
        -- Physical Science
        {
            pos   = {0.626, 0.1, 0.074},
            size  = 300,
            state = false,
            label = "physicalScienceCS"
        },
        -- Piloting
        {
            pos   = {0.626, 0.1, 0.172},
            size  = 300,
            state = false,
            label = "pilotingCS"
        },
        -- Profession
        {
            pos   = {0.626, 0.1, 0.27},
            size  = 300,
            state = false,
            label = "profession1CS"
        },
        -- Profession
        {
            pos   = {0.626, 0.1, 0.461},
            size  = 300,
            state = false,
            label = "profession2CS"
        },
        -- Sense Motive
        {
            pos   = {0.626, 0.1, 0.655},
            size  = 300,
            state = false,
            label = "senseMotiveCS"
        },
        -- Sleight of Hand
        {
            pos   = {0.626, 0.1, 0.753},
            size  = 300,
            state = false,
            label = "sleightOfHandCS"
        },
        -- Stealth
        {
            pos   = {0.626, 0.1, 0.851},
            size  = 300,
            state = false,
            label = "stealthCS"
        },
        -- Survival
        {
            pos   = {0.626, 0.1, 0.948},
            size  = 300,
            state = false,
            label = "suvivalCS"
        },
        ------------------------------------------------------------------------
        -- Full BAB?
        {
            pos   = {1.25, 0.1, -1.495},
            size  = 300,
            state = false,
            label = "goodBAB"
        },


        -- Good FORT?
        {
            pos   = {-0.9, 0.1, -0.134},
            size  = 300,
            state = false,
            label = "goodFORT"
        },
        -- Good REF?
        {
            pos   = {-0.9, 0.1, -0.0375},
            size  = 300,
            state = false,
            label = "goodREF"
        },
        -- Good WILL?
        {
            pos   = {-0.9, 0.1, 0.059},
            size  = 300,
            state = false,
            label = "goodWILL"
        },
        ------------------------------------------------------------------------

        -- Conditions!
        {
            pos   = {0.15, 0.1, 1.227},
            size  = 300,
            state = false,
            label = "asleep"
        },
        {
            pos   = {0.15, 0.1, 1.311},
            size  = 300,
            state = false,
            label = "bleeding"
        },
        {
            pos   = {0.15, 0.1, 1.406},
            size  = 300,
            state = false,
            label = "blinded"
        },
        {
            pos   = {0.15, 0.1, 1.499},
            size  = 300,
            state = false,
            label = "burning"
        },
        {
            pos   = {0.15, 0.1, 1.593},
            size  = 300,
            state = false,
            label = "confused"
        },
        {
            pos   = {0.15, 0.1, 1.687},
            size  = 300,
            state = false,
            label = "cowering"
        },
        {
            pos   = {0.15, 0.1, 1.781},
            size  = 300,
            state = false,
            label = "dazed"
        },
        {
            pos   = {0.15, 0.1, 1.875},
            size  = 300,
            state = false,
            label = "dazzled"
        },

        {
            pos   = {0.55, 0.1, 1.227},
            size  = 300,
            state = false,
            label = "deafened"
        },
        {
            pos   = {0.55, 0.1, 1.311},
            size  = 300,
            state = false,
            label = "dying"
        },
        {
            pos   = {0.55, 0.1, 1.406},
            size  = 300,
            state = false,
            label = "encumbered"
        },
        {
            pos   = {0.55, 0.1, 1.499},
            size  = 300,
            state = false,
            label = "entangled"
        },
        {
            pos   = {0.55, 0.1, 1.593},
            size  = 300,
            state = false,
            label = "exhausted"
        },
        {
            pos   = {0.55, 0.1, 1.687},
            size  = 300,
            state = false,
            label = "fascinated"
        },
        {
            pos   = {0.55, 0.1, 1.781},
            size  = 300,
            state = false,
            label = "fatigued"
        },
        {
            pos   = {0.55, 0.1, 1.875},
            size  = 300,
            state = false,
            label = "flatfooted"
        },

        {
            pos   = {0.95, 0.1, 1.227},
            size  = 300,
            state = false,
            label = "frightened"
        },
        {
            pos   = {0.95, 0.1, 1.311},
            size  = 300,
            state = false,
            label = "grappled"
        },
        {
            pos   = {0.95, 0.1, 1.406},
            size  = 300,
            state = false,
            label = "helpless"
        },
        {
            pos   = {0.95, 0.1, 1.499},
            size  = 300,
            state = false,
            label = "nauseated"
        },
        {
            pos   = {0.95, 0.1, 1.593},
            size  = 300,
            state = false,
            label = "offkilter"
        },
        {
            pos   = {0.95, 0.1, 1.687},
            size  = 300,
            state = false,
            label = "offtarget"
        },
        {
            pos   = {0.95, 0.1, 1.781},
            size  = 300,
            state = false,
            label = "overburdened"
        },
        {
            pos   = {0.95, 0.1, 1.875},
            size  = 300,
            state = false,
            label = "panicked"
        },

        {
            pos   = {1.35, 0.1, 1.227},
            size  = 300,
            state = false,
            label = "paralyzed"
        },
        {
            pos   = {1.35, 0.1, 1.311},
            size  = 300,
            state = false,
            label = "pinned"
        },
        {
            pos   = {1.35, 0.1, 1.406},
            size  = 300,
            state = false,
            label = "prone"
        },
        {
            pos   = {1.35, 0.1, 1.499},
            size  = 300,
            state = false,
            label = "shaken"
        },
        {
            pos   = {1.35, 0.1, 1.593},
            size  = 300,
            state = false,
            label = "sickened"
        },
        {
            pos   = {1.35, 0.1, 1.687},
            size  = 300,
            state = false,
            label = "staggered"
        },
        {
            pos   = {1.35, 0.1, 1.781},
            size  = 300,
            state = false,
            label = "stunned"
        },
        {
            pos   = {1.35, 0.1, 1.875},
            size  = 300,
            state = false,
            label = "unconcious"
        },


        --End of checkboxes
    },
    --THE COUNTERS ARE DEAD BABY
    counter = {},
    --Add editable text boxes
    textbox = {
        --[[
        pos       = the position (pasted from the helper tool)
        rows      = how many lines of text you want for this box
        width     = how wide the text box is
        font_size = size of text. This and "rows" effect overall height
        label     = what is shown when there is no text. "" = nothing
        value     = text entered into box. "" = nothing
        alignment = Number to indicate how you want text aligned
                    (1=Automatic, 2=Left, 3=Center, 4=Right, 5=Justified)
        ]]
        -- !! Strength !!
        {
          pos       = {-1.33, 0.12, -1.142},
          rows      = 1,
          width     = 900,
          font_size = 800,
          label     = "STR",
          value     = 10,
          alignment = 3,
          editable = 1,
        },
        -- !! Dexterity !!
        {
          pos       = {-1.33, 0.12, -0.789},
          rows      = 1,
          width     = 900,
          font_size = 800,
          label     = "DEX",
          value     = 10,
          alignment = 3,
          editable = 1,
        },
        -- !! Constitution !!
        {
          pos       = {-1.33, 0.12, -0.446},
          rows      = 1,
          width     = 900,
          font_size = 800,
          label     = "CON",
          value     = 10,
          alignment = 3,
          editable = 1,
        },
        -- !! Intelligence !!
        {
          pos       = {-1.33, 0.12, -0.11},
          rows      = 1,
          width     = 900,
          font_size = 800,
          label     = "INT",
          value     = 10,
          alignment = 3,
          editable = 1,
        },
        -- !! Wisdom !!
        {
          pos       = {-1.33, 0.12, 0.22},
          rows      = 1,
          width     = 900,
          font_size = 800,
          label     = "WIS",
          value     = 10,
          alignment = 3,
          editable = 1,
        },
        -- !! Charisma !!
        {
          pos       = {-1.33, 0.12, 0.563},
          rows      = 1,
          width     = 900,
          font_size = 800,
          label     = "CHA",
          value     = 10,
          alignment = 3,
          editable = 1,
        },



        -- !! KAC !!
        {
          pos       = {-0.997, 0.1, -1.133},
          rows      = 1,
          width     = 1000,
          font_size = 700,
          label     = "KAC",
          value     = 10,
          alignment = 3,
          editable = 0,
        },
        -- !! EAC !!
        {
          pos       = {-0.658, 0.1, -1.133},
          rows      = 1,
          width     = 1000,
          font_size = 700,
          label     = "EAC",
          value     = 10,
          alignment = 3,
          editable = 0,
        },
        -- !! Initiative !!
        {
          pos       = {-0.319, 0.1, -1.133},
          rows      = 1,
          width     = 1000,
          font_size = 700,
          label     = "INIT",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! CMD !!
        {
          pos       = {0.02, 0.1, -1.133},
          rows      = 1,
          width     = 1000,
          font_size = 700,
          label     = "CMD",
          value     = 18,
          alignment = 3,
          editable = 0,
        },


        -- !! FORT !!
        {
          pos       = {-0.817, 0.1, -0.134},
          rows      = 1,
          width     = 500,
          font_size = 450,
          label     = "FORT",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! REF !!
        {
          pos       = {-0.817, 0.1, -0.0375},
          rows      = 1,
          width     = 500,
          font_size = 450,
          label     = "REF",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! WILL !!
        {
          pos       = {-0.817, 0.1, 0.059},
          rows      = 1,
          width     = 500,
          font_size = 450,
          label     = "WILL",
          value     = 0,
          alignment = 3,
          editable = 0,
        },



        -- !! BAB !!
        {
          pos       = {-0.559, 0.1, 0.023},
          rows      = 1,
          width     = 850,
          font_size = 650,
          label     = "BAB",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Melee !!
        {
          pos       = {-0.27, 0.1, 0.023},
          rows      = 1,
          width     = 850,
          font_size = 650,
          label     = "meleeAttackRolls",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Ranged !!
        {
          pos       = {0.019, 0.1, 0.023},
          rows      = 1,
          width     = 850,
          font_size = 650,
          label     = "rangedAttackRolls",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Thrown !!
        {
          pos       = {0.308, 0.1, 0.023},
          rows      = 1,
          width     = 850,
          font_size = 650,
          label     = "thrownAttackRolls",
          value     = 0,
          alignment = 3,
          editable = 0,
        },



        -- !! Max SP !!
        {
          pos       = {-0.473, 0.1, -0.854},
          rows      = 1,
          width     = 650,
          font_size = 300,
          label     = "maxSP",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Cur SP !!
        {
          pos       = {-0.69, 0.1, -0.716},
          rows      = 1,
          width     = 1300,
          font_size = 800,
          label     = "curSP",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Max HP !!
        {
          pos       = {-0.473, 0.1, -0.514},
          rows      = 1,
          width     = 650,
          font_size = 300,
          label     = "maxHP",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Cur HP !!
        {
          pos       = {-0.69, 0.1, -0.38},
          rows      = 1,
          width     = 1300,
          font_size = 800,
          label     = "curHP",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Cur RP !!
        {
          pos       = {-0.044, 0.1, -0.728},
          rows      = 1,
          width     = 900,
          font_size = 800,
          label     = "curRP",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Max RP !!
        {
          pos       = {0.29, 0.1, -0.728},
          rows      = 1,
          width     = 900,
          font_size = 800,
          label     = "maxRP",
          value     = 0,
          alignment = 3,
          editable = 0,
        },


        -- !! Acrobatics !!
        {
          pos       = {0.771, 0.1, -1.183},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "acrobaticsRanks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Athletics !!
        {
          pos       = {0.771, 0.1, -1.086},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "athleticsRanks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Bluff !!
        {
          pos       = {0.771, 0.1, -0.989},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "bluffRanks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Computers !!
        {
          pos       = {0.771, 0.1, -0.892},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "computersRanks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Culture !!
        {
          pos       = {0.771, 0.1, -0.796},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "cultureRanks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Diplomacy !!
        {
          pos       = {0.771, 0.1, -0.699},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "diplomacyRanks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Disguise !!
        {
          pos       = {0.771, 0.1, -0.602},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "disguiseRanks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Engineering !!
        {
          pos       = {0.771, 0.1, -0.505},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "engineeringRanks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Initmidate !!
        {
          pos       = {0.771, 0.1, -0.408},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "intimidateRanks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Life Science !!
        {
          pos       = {0.771, 0.1, -0.3112},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "lifeScienceRanks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Medicine !!
        {
          pos       = {0.771, 0.1, -0.214},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "medicineRanks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Mysticism !!
        {
          pos       = {0.771, 0.1, -0.117},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "mysticismRanks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Perception !!
        {
          pos       = {0.771, 0.1, -0.021},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "perceptionRanks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Physical Science !!
        {
          pos       = {0.771, 0.1, 0.076},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "physicalScienceRanks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Piloting !!
        {
          pos       = {0.771, 0.1, 0.173},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "pilotingRanks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Profession !!
        {
          pos       = {0.771, 0.1, 0.27},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "profession1Ranks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Profession !!
        {
          pos       = {0.771, 0.1, 0.464},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "profession2Ranks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Sense Motive !!
        {
          pos       = {0.771, 0.1, 0.655},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "senseMotiveRanks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Sleight of Hand !!
        {
          pos       = {0.771, 0.1, 0.75},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "sleightOfHandRanks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Stealth !!
        {
          pos       = {0.771, 0.1, 0.85},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "stealthRanks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },
        -- !! Survival !!
        {
          pos       = {0.771, 0.1, 0.948},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "survivalRanks",
          value     = 0,
          alignment = 3,
          editable = 1,
        },

        --ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo--
        -- !! Acrobatics !!
        {
          pos       = {1.355, 0.1, -1.183},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "acrobatics",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Athletics !!
        {
          pos       = {1.355, 0.1, -1.086},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "athletics",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Bluff !!
        {
          pos       = {1.355, 0.1, -0.989},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "bluff",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Computers !!
        {
          pos       = {1.355, 0.1, -0.892},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "computers",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Culture !!
        {
          pos       = {1.355, 0.1, -0.796},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "culture",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Diplomacy !!
        {
          pos       = {1.355, 0.1, -0.699},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "diplomacy",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Disguise !!
        {
          pos       = {1.355, 0.1, -0.602},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "disguise",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Engineering !!
        {
          pos       = {1.355, 0.1, -0.505},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "engineering",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Initmidate !!
        {
          pos       = {1.355, 0.1, -0.408},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "intimidate",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Life Science !!
        {
          pos       = {1.355, 0.1, -0.3112},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "lifeScience",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Medicine !!
        {
          pos       = {1.355, 0.1, -0.214},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "medicine",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Mysticism !!
        {
          pos       = {1.355, 0.1, -0.117},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "mysticism",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Perception !!
        {
          pos       = {1.355, 0.1, -0.021},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "perception",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Physical Science !!
        {
          pos       = {1.355, 0.1, 0.076},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "physicalScience",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Piloting !!
        {
          pos       = {1.355, 0.1, 0.173},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "piloting",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Profession !!
        {
          pos       = {1.355, 0.1, 0.27},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "-profession1",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Profession !!
        {
          pos       = {1.355, 0.1, 0.464},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "profession2",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Sense Motive !!
        {
          pos       = {1.355, 0.1, 0.655},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "senseMotive",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Sleight of Hand !!
        {
          pos       = {1.355, 0.1, 0.75},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "sleightOfHand",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Stealth !!
        {
          pos       = {1.355, 0.1, 0.85},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "stealth",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        -- !! Survival !!
        {
          pos       = {1.355, 0.1, 0.948},
          rows      = 1,
          width     = 350,
          font_size = 300,
          label     = "survival",
          value     = 0,
          alignment = 3,
          editable = 0,
        },
        --ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo--


        -----------------------------------------------------------
        -- !! HP/SP per Class Level !!
        {
            pos       = {0.75, 0.1, -1.735},
            rows      = 1,
            width     = 3400,
            font_size = 300,
            label     = "write HP/lvl there >",
            value     = "HP/SP per Class Level:",
            alignment = 1,
            editable = 0,
        },
        {
            pos       = {1.25, 0.1, -1.735},
            rows      = 1,
            width     = 950,
            font_size = 300,
            label     = "HPPerLevel",
            value     = 6,
            alignment = 3,
            editable = 1,
        },
        -- !! HP from Race !!
        {
            pos       = {0.75, 0.1, -1.655},
            rows      = 1,
            width     = 3400,
            font_size = 300,
            label     = "write racial HP there >",
            value     = "HP from Race:",
            alignment = 1,
            editable = 0,
        },
        {
            pos       = {1.25, 0.1, -1.655},
            rows      = 1,
            width     = 950,
            font_size = 300,
            label     = "HP/Race",
            value     = 4,
            alignment = 3,
            editable = 1,
        },
        -- !! Skill ranks per Class Level !!
        {
            pos       = {0.75, 0.1, -1.575},
            rows      = 1,
            width     = 3400,
            font_size = 300,
            label     = "write ranks/lvl there >",
            value     = "Skill ranks per level:",
            alignment = 1,
            editable = 0,
        },
        {
            pos       = {1.25, 0.1, -1.575},
            rows      = 1,
            width     = 950,
            font_size = 300,
            label     = "ranksPerLevel",
            value     = 4,
            alignment = 3,
            editable = 1,
        },
        -- !! Full BAB progression? !!
        {
            pos       = {0.75, 0.1, -1.495},
            rows      = 1,
            width     = 3400,
            font_size = 300,
            label     = "check if martial class >",
            value     = "Full BAB progression?",
            alignment = 1,
            editable = 0,
        },

        -----------------------------------------------------------




        -- !! Name !!
        {
            pos       = {-0.33, 0.1, -1.845},
            rows      = 1,
            width     = 5000,
            font_size = 300,
            label     = "name",
            value     = "Anonymouse",
            alignment = 2,
            editable = 1,
        },
        -- !! Class !!
        {
            pos       = {-1.18, 0.1, -1.744},
            rows      = 1,
            width     = 2500,
            font_size = 300,
            label     = "class",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        -- !! Level !!
        {
            pos       = {-0.785, 0.1, -1.744},
            rows      = 1,
            width     = 1000,
            font_size = 300,
            label     = "LVL",
            value     = 1,
            alignment = 2,
            editable = 1,
        },
        -- !! Race !!
        {
            pos       = {-0.424, 0.1, -1.744},
            rows      = 1,
            width     = 2000,
            font_size = 300,
            label     = "race",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        -- !! Theme !!
        {
            pos       = {0.111, 0.1, -1.744},
            rows      = 1,
            width     = 2000,
            font_size = 300,
            label     = "theme",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        -- !! Size !!
        {
            pos       = {-1.333, 0.1, -1.6},
            rows      = 1,
            width     = 1200,
            font_size = 300,
            label     = "size",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        -- !! Speed !!
        {
            pos       = {-1.105, 0.1, -1.6},
            rows      = 1,
            width     = 650,
            font_size = 300,
            label     = "speed",
            value     = 30,
            alignment = 3,
            editable = 1,
        },
        -- !! Gender !!
        {
            pos       = {-0.727, 0.1, -1.6},
            rows      = 1,
            width     = 1000,
            font_size = 300,
            label     = "gender",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        -- !! Home World !!
        {
            pos       = {-0.103, 0.1, -1.6},
            rows      = 1,
            width     = 4250,
            font_size = 300,
            label     = "homeWorld",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        -- !! Alignment !!
        {
            pos       = {-1.226, 0.1, -1.452},
            rows      = 1,
            width     = 2200,
            font_size = 300,
            label     = "alignment",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        -- !! Deity !!
        {
            pos       = {-0.689, 0.1, -1.452},
            rows      = 1,
            width     = 2200,
            font_size = 300,
            label     = "deity",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        -- !! Player Name !!
        {
            pos       = {-0.042, 0.1, -1.452},
            rows      = 1,
            width     = 3200,
            font_size = 300,
            label     = "playerName",
            value     = "",
            alignment = 2,
            editable = 0,
        },
        -- !! DR !!
        {
            pos       = {-0.907, 0.1, -0.96},
            rows      = 1,
            width     = 2000,
            font_size = 300,
            label     = "DR",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        -- !! Resistances !!
        {
            pos       = {-0.127, 0.1, -0.96},
            rows      = 1,
            width     = 2600,
            font_size = 300,
            label     = "Resistances",
            value     = "",
            alignment = 2,
            editable = 1,
        },

        -- !! Weapons !!

        -- Weapon 1
        {
            pos       = {-0.900, 0.1, 0.29},
            rows      = 1,
            width     = 2450,
            font_size = 250,
            label     = "weapon1Name",
            value     = "Laser Rifle, Azimuth",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-0.554, 0.1, 0.29},
            rows      = 1,
            width     = 550,
            font_size = 300,
            label     = "weapon1LVL",
            value     = 1,
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-0.373, 0.1, 0.29},
            rows      = 1,
            width     = 1000,
            font_size = 200,
            label     = "weapon1Damage",
            value     = "1d8",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-0.104, 0.1, 0.29},
            rows      = 1,
            width     = 1200,
            font_size = 200,
            label     = "weapon1DamageType",
            value     = "Fire",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {0.196, 0.1, 0.29},
            rows      = 1,
            width     = 1200,
            font_size = 200,
            label     = "weapon1Crit",
            value     = "1d6 Burn",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {0.384, 0.1, 0.29},
            rows      = 1,
            width     = 1,
            font_size = 1,
            label     = "weapon1Bulk",
            value     = 'discontinued',
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-1.016, 0.1, 0.383},
            rows      = 1,
            width     = 1150,
            font_size = 300,
            label     = "weapon1Range",
            value     = "80ft",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-0.73, 0.1, 0.383},
            rows      = 1,
            width     = 1150,
            font_size = 150,
            label     = "weapon1Type",
            value     = "longarm",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-0.392, 0.1, 0.383},
            rows      = 1,
            width     = 1650,
            font_size = 200,
            label     = "weapon1Capacity/Usage/AmmoType",
            value     = "20/1/charges",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {0.115, 0.1, 0.383},
            rows      = 1,
            width     = 2900,
            font_size = 200,
            label     = "weapon1Special",
            value     = "",
            alignment = 2,
            editable = 1,
        },

        -- Weapon 2
          {
              pos       = {-0.900, 0.1, 0.485},
              rows      = 1,
              width     = 2450,
              font_size = 250,
              label     = "weapon2Name",
              value     = "",
              alignment = 2,
              editable = 1,
          },
          {
              pos       = {-0.554, 0.1, 0.485},
              rows      = 1,
              width     = 550,
              font_size = 300,
              label     = "weapon2LVL",
              value     = "",
              alignment = 2,
              editable = 1,
          },
          {
              pos       = {-0.373, 0.1, 0.485},
              rows      = 1,
              width     = 1000,
              font_size = 200,
              label     = "weapon2Damage",
              value     = "",
              alignment = 2,
              editable = 1,
          },
          {
              pos       = {-0.104, 0.1, 0.485},
              rows      = 1,
              width     = 1200,
              font_size = 200,
              label     = "weapon2DamageType",
              value     = "",
              alignment = 2,
              editable = 1,
          },
          {
              pos       = {0.196, 0.1, 0.485},
              rows      = 1,
              width     = 1200,
              font_size = 200,
              label     = "weapon2Crit",
              value     = "",
              alignment = 2,
              editable = 1,
          },
          {
              pos       = {0.384, 0.1, 0.485},
              rows      = 1,
              width     = 1,
              font_size = 1,
              label     = "weapon2Bulk",
              value     = 'discontinued',
              alignment = 2,
              editable = 1,
          },
          {
              pos       = {-1.016, 0.1, 0.583},
              rows      = 1,
              width     = 1150,
              font_size = 300,
              label     = "weapon2Range",
              value     = "",
              alignment = 2,
              editable = 1,
          },
          {
              pos       = {-0.73, 0.1, 0.583},
              rows      = 1,
              width     = 1150,
              font_size = 150,
              label     = "weapon2Type",
              value     = "",
              alignment = 2,
              editable = 1,
          },
          {
              pos       = {-0.392, 0.1, 0.583},
              rows      = 1,
              width     = 1650,
              font_size = 200,
              label     = "weapon2Capacity/Usage/AmmoType",
              value     = "",
              alignment = 2,
              editable = 1,
          },
          {
              pos       = {0.115, 0.1, 0.583},
              rows      = 1,
              width     = 2900,
              font_size = 200,
              label     = "weapon2Special",
              value     = "",
              alignment = 2,
              editable = 1,
          },

          -- Weapon 3
          {
              pos       = {-0.900, 0.1, 0.674},
              rows      = 1,
              width     = 2450,
              font_size = 250,
              label     = "weapon3Name",
              value     = "",
              alignment = 2,
              editable = 1,
          },
          {
              pos       = {-0.554, 0.1, 0.674},
              rows      = 1,
              width     = 550,
              font_size = 300,
              label     = "weapon3LVL",
              value     = "",
              alignment = 2,
              editable = 1,
          },
          {
              pos       = {-0.373, 0.1, 0.674},
              rows      = 1,
              width     = 1000,
              font_size = 200,
              label     = "weapon3Damage",
              value     = "",
              alignment = 2,
              editable = 1,
          },
          {
              pos       = {-0.104, 0.1, 0.674},
              rows      = 1,
              width     = 1200,
              font_size = 200,
              label     = "weapon3DamageType",
              value     = "",
              alignment = 2,
              editable = 1,
          },
          {
              pos       = {0.196, 0.1, 0.674},
              rows      = 1,
              width     = 1200,
              font_size = 200,
              label     = "weapon3Crit",
              value     = "",
              alignment = 2,
              editable = 1,
          },
          {
              pos       = {0.384, 0.1, 0.674},
              rows      = 1,
              width     = 1,
              font_size = 1,
              label     = "weapon3Bulk",
              value     = 'discontinued',
              alignment = 2,
              editable = 1,
          },
          {
              pos       = {-1.016, 0.1, 0.773},
              rows      = 1,
              width     = 1150,
              font_size = 300,
              label     = "weapon3Range",
              value     = "",
              alignment = 2,
              editable = 1,
          },
          {
              pos       = {-0.73, 0.1, 0.773},
              rows      = 1,
              width     = 1150,
              font_size = 150,
              label     = "weapon3Type",
              value     = "",
              alignment = 2,
              editable = 1,
          },
          {
              pos       = {-0.392, 0.1, 0.773},
              rows      = 1,
              width     = 1650,
              font_size = 200,
              label     = "weapon3Capacity/Usage/AmmoType",
              value     = "",
              alignment = 2,
              editable = 1,
          },
          {
              pos       = {0.115, 0.1, 0.773},
              rows      = 1,
              width     = 2900,
              font_size = 200,
              label     = "weapon3Special",
              value     = "",
              alignment = 2,
              editable = 1,
          },

        -- !! proficiencies list !!
        {
            pos       = {-0.948, 0.1, 1.49},
            rows      = 1,
            width     = 4800,
            font_size = 300,
            label     = "proficienciesTitle",
            value     = "Wpns: N one, P roficient, S pecialised",
            alignment = 2,
            editable = 0,
        },
        {
            pos       = {-1.25, 0.1, 1.73},
            rows      = 8,
            width     = 1900,
            font_size = 250,
            label     = "proficienciesList",
            value     = "Basic Melee:\nAdvanced Melee:\nSmall Arm:\nLongarm:\nHeavy Weapons:\nSniper:\nGrenades:\nSpecial:",
            alignment = 2,
            editable = 0,
        },


        -- !! Professions 1 !!
        {
            pos       = {0.990, 0.1, 0.342},
            rows      = 1,
            width     = 2500,
            font_size = 300,
            label     = "profession1Type",
            value     = "(INT-based)",
            alignment = 2,
            editable = 1,
        },
        -- !! Professions 2 !!
        {
            pos       = {0.990, 0.1, 0.537},
            rows      = 1,
            width     = 2500,
            font_size = 300,
            label     = "profession2Type",
            value     = "(WIS-based)",
            alignment = 2,
            editable = 1,
        },

        -- !! Armor !!
        {
            pos       = {-1.150, 0.1, 0.962},
            rows      = 1,
            width     = 2700,
            font_size = 300,
            label     = "armorName",
            value     = "Carboard Armour",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-0.749, 0.1, 0.962},
            rows      = 1,
            width     = 500,
            font_size = 300,
            label     = "armorLVL",
            value     = 20,
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-1.356, 0.1, 1.062},
            rows      = 1,
            width     = 800,
            font_size = 300,
            label     = "armorEAC",
            value     = 3,
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-1.164, 0.1, 1.062},
            rows      = 1,
            width     = 800,
            font_size = 300,
            label     = "armorKAC",
            value     = 5,
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-0.97, 0.1, 1.062},
            rows      = 1,
            width     = 800,
            font_size = 300,
            label     = "armorMaxDEX",
            value     = 2,
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-0.776, 0.1, 1.062},
            rows      = 1,
            width     = 800,
            font_size = 300,
            label     = "ACP",
            value     = -2,
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-1.329, 0.1, 1.16},
            rows      = 1,
            width     = 1000,
            font_size = 300,
            label     = "armorType",
            value     = "Light",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-1.093, 0.1, 1.16},
            rows      = 1,
            width     = 1000,
            font_size = 200,
            label     = "armorCapacity/Usage",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-0.894, 0.1, 1.16},
            rows      = 1,
            width     = 600,
            font_size = 150,
            label     = "armorUpgrades",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-0.752, 0.1, 1.16},
            rows      = 1,
            width     = 600,
            font_size = 150,
            label     = "armorWeapons",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-1.354, 0.1, 1.258},
            rows      = 1,
            width     = 800,
            font_size = 200,
            label     = "armorStrength",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-1.163, 0.1, 1.258},
            rows      = 1,
            width     = 800,
            font_size = 200,
            label     = "armorDamage",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-0.967, 0.1, 1.258},
            rows      = 1,
            width     = 800,
            font_size = 200,
            label     = "armorBulk",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-0.777, 0.1, 1.258},
            rows      = 1,
            width     = 800,
            font_size = 200,
            label     = "armorSpeed",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-1.257, 0.1, 1.354},
            rows      = 1,
            width     = 1700,
            font_size = 300,
            label     = "armorUpgradeSlot1",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-0.874, 0.1, 1.354},
            rows      = 1,
            width     = 1700,
            font_size = 300,
            label     = "armorUpgradeSlot2",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-0.486, 0.1, 0.969},
            rows      = 1,
            width     = 1700,
            font_size = 300,
            label     = "armorUpgradeSlot3",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-0.486, 0.1, 1.066},
            rows      = 1,
            width     = 1700,
            font_size = 300,
            label     = "armorUpgradeSlot4",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-0.486, 0.1, 1.16},
            rows      = 1,
            width     = 1700,
            font_size = 300,
            label     = "armorUpgradeSlot5",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-0.486, 0.1, 1.256},
            rows      = 1,
            width     = 1700,
            font_size = 300,
            label     = "armorUpgradeSlot6",
            value     = "",
            alignment = 2,
            editable = 1,
        },
        {
            pos       = {-0.486, 0.1, 1.355},
            rows      = 1,
            width     = 1700,
            font_size = 300,
            label     = "armorUpgradeSlot7",
            value     = "",
            alignment = 2,
            editable = 1,
        },




        -- !! Strength MOD!!
        {
          pos       = {-1.33, 0.12, -1.02},
          rows      = 1,
          width     = 900,
          font_size = 250,
          label     = "STRMOD",
          value     = "0",
          alignment = 3,
          editable = 0,
        },
        -- !! Dexterity MOD!!
        {
          pos       = {-1.33, 0.12, -0.667},
          rows      = 1,
          width     = 900,
          font_size = 250,
          label     = "DEXMOD",
          value     = "0",
          alignment = 3,
          editable = 0,
        },
        -- !! Constitution MOD!!
        {
          pos       = {-1.33, 0.12, -0.324},
          rows      = 1,
          width     = 900,
          font_size = 250,
          label     = "CONMOD",
          value     = "0",
          alignment = 3,
          editable = 0,
        },
        -- !! Intelligence MOD!!
        {
          pos       = {-1.33, 0.12, 0.012},
          rows      = 1,
          width     = 900,
          font_size = 250,
          label     = "INTMOD",
          value     = "0",
          alignment = 3,
          editable = 0,
        },
        -- !! Wisdom MOD!!
        {
          pos       = {-1.33, 0.12, 0.342},
          rows      = 1,
          width     = 900,
          font_size = 250,
          label     = "WISMOD",
          value     = "0",
          alignment = 3,
          editable = 0,
        },
        -- !! Charisma MOD!!
        {
          pos       = {-1.33, 0.12, 0.685},
          rows      = 1,
          width     = 900,
          font_size = 250,
          label     = "CHAMOD",
          value     = "0",
          alignment = 3,
          editable = 0,
        },


        -- !! Key Stat !!
        {
          pos       = {0.75, 0.1, -1.415},
          rows      = 1,
          width     = 3400,
          font_size = 300,
          label     = "write class' key stat >",
          value     = "Key stat: ",
          alignment = 1,
          editable = 0,
        },
        {
          pos       = {1.25, 0.1, -1.415},
          rows      = 1,
          width     = 950,
          font_size = 300,
          label     = "keySTAT",
          value     = "STR",
          alignment = 3,
          editable = 1,
        },


        -- !! current/max ranks !!
        {
          pos       = {1.3, 0.1, -1.263},
          rows      = 1,
          width     = 950,
          font_size = 300,
          label     = "rankCount",
          value     = "0/0",
          alignment = 3,
          editable = 0,
        },


        -- Proficiencies Input
        {
            pos       = {-1.02, 0.1, 1.73},
            rows      = 8,
            width     = 270,
            font_size = 250,
            label     = "proficienciesInput",
            value     = "N\nN\nN\nN\nN\nN\nN\nN",
            alignment = 3,
            editable = 1,
        },


        -- !! Speed Adjusted !!
        {
            pos       = {-0.956, 0.1, -1.6},
            rows      = 1,
            width     = 650,
            font_size = 300,
            label     = "speedAdjusted",
            value     = "->30",
            alignment = 3,
            editable = 0,
        },

        -- !! Spell DC !!
        {
            pos       = {0.125, 0.1, -0.43},
            rows      = 1,
            width     = 2500,
            font_size = 300,
            label     = "spellDC",
            value     = "10 + spell level",
            alignment = 3,
            editable = 0,
        },
        -- !! Speed Adjusted !!
        {
            pos       = {0.125, 0.1, -0.29},
            rows      = 1,
            width     = 2500,
            font_size = 300,
            label     = "abilityDC",
            value     = 10,
            alignment = 3,
            editable = 0,
        },

        --End of textboxes
    },
    --Add buttons
    button = {
      -- Acrobatics
      {
         pos = {1.48, 0.1, -1.183},
         rot = {0,0,0},
         label = 'acrobatics',
      },
      -- Athletics
      {
          pos   = {1.48, 0.1, -1.085},
          rot = {0,0,0},
          label = "athletics"
      },
      -- Bluff
      {
          pos   = {1.48, 0.1, -0.994},
          rot = {0,0,0},
          label = "bluff"
      },
      -- Computers
      {
          pos   = {1.48, 0.1, -0.895},
          rot = {0,0,0},
          label = "computers"
      },
      -- Culture
      {
          pos   = {1.48, 0.1, -0.8},
          rot = {0,0,0},
          label = "culture"
      },
      -- Diplomacy
      {
          pos   = {1.48, 0.1, -0.701},
          rot = {0,0,0},
          label = "diplomacy"
      },
      -- Disguise
      {
          pos   = {1.48, 0.1, -0.604},
          rot = {0,0,0},
          label = "disguise"
      },
      -- Engineering
      {
          pos   = {1.48, 0.1, -0.508},
          rot = {0,0,0},
          label = "engineering"
      },
      -- Intimidate
      {
          pos   = {1.48, 0.1, -0.414},
          rot = {0,0,0},
          label = "intimidate"
      },
      -- Life Science
      {
          pos   = {1.48, 0.1, -0.317},
          rot = {0,0,0},
          label = "lifeScience"
      },
      -- Medicine
      {
          pos   = {1.48, 0.1, -0.215},
          rot = {0,0,0},
          label = "medicine"
      },
      -- Mysticism
      {
          pos   = {1.48, 0.1, -0.119},
          rot = {0,0,0},
          label = "mysticism"
      },
      -- Perception
      {
          pos   = {1.48, 0.1, -0.016},
          rot = {0,0,0},
          label = "perception"
      },
      -- Physical Science
      {
          pos   = {1.48, 0.1, 0.074},
          rot = {0,0,0},
          label = "physicalScience"
      },
      -- Piloting
      {
          pos   = {1.48, 0.1, 0.172},
          rot = {0,0,0},
          label = "piloting"
      },
      -- Profession
      {
          pos   = {1.48, 0.1, 0.27},
          rot = {0,0,0},
          label = "profession1"
      },
      -- Profession
      {
          pos   = {1.48, 0.1, 0.461},
          rot = {0,0,0},
          label = "profession2"
      },
      -- Sense Motive
      {
          pos   = {1.48, 0.1, 0.655},
          rot = {0,0,0},
          label = "senseMotive"
      },
      -- Sleight of Hand
      {
          pos   = {1.48, 0.1, 0.753},
          rot = {0,0,0},
          label = "sleightOfHand"
      },
      -- Stealth
      {
          pos   = {1.48, 0.1, 0.851},
          rot = {0,0,0},
          label = "stealth"
      },
      -- Survival
      {
          pos   = {1.48, 0.1, 0.948},
          rot = {0,0,0},
          label = "survival"
      },


      -- Weapon 1
      {
          pos   = {0.39, 0.1, 0.291},
          rot = {0,0,0},
          label = "weapon1"
      },
      -- Weapon 2
      {
          pos   = {0.39, 0.1, 0.482},
          rot = {0,0,0},
          label = "weapon2"
      },
      -- Weapon 3
      {
          pos   = {0.39, 0.1, 0.676},
          rot = {0,0,0},
          label = "weapon3"
      },
    },
    majorButton = {
      -- update all
      {
        func = 'update_all',
        label = 'updateAll',
        pos = {1.52, 0.1, -2},
        rot = {0, 0, 0},
        size = 100,
        font_size = 1,
      },
      -- set Player
      {
        func = 'set_player',
        label = 'setPlayer',
        pos = {-1.5, 0.1, -2.04},
        rot = {0, 0, 0},
        size = 40,
        font_size = 1,
      },
      -- set Figure
      {
        func = 'set_figure',
        label = 'setFigure',
        pos = {-1.5, 0.1, -1.97},
        rot = {0, 0, 0},
        size = 40,
        font_size = 1,
      },
      -- open mod wizard
      {
        func = 'open_mod_wizard',
        label = 'openModWizard',
        pos = {1.06, 0.1, -2},
        rot = {0, 0, 0},
        size = 100,
        font_size = 1,
      },
    },
    -- Assignments for player, figure
    assignment = {
      assignedPlayer = "",
      assignedFigure = "",
    },

    -- UI Creation =================================================== UI create
    -- modWizard window >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    modWizardBase = {
      -- Defaults
      {
        tag = 'Defaults',
        children =
        {
          -- the big mod window
          {
            tag = 'Panel',
            attributes =
            {
                class="Window" ,
                rotation='0 0 180' ,
                scale = '0.1 0.1',
                rectAlignment="MiddleCenter" ,
                returnToOriginalPositionWhenReleased=false ,
                allowDragging=true ,
                color="#69696940" ,
                outline="#404040",
            },
          },

          -- top bar
          {
            tag = 'Panel',
            attributes =
            {
                class="TopBar"  ,
                height=100 ,
                width=2250 ,
                rectAlignment="UpperCenter" ,
                color="#19197040" ,
                outline="#00008B",
            },
          },

          -- top bar right buttons
          {
            tag = 'Button',
            attributes =
            {
                class="topRightButtons" ,
                fontSize=90 ,
                fontStyle="Bold" ,
                width=100 ,
                height=100 ,
                rectAlignment="UpperRight" ,
                color="#eeeeee",
            },
          },

          -- top bar left buttons
          {
            tag = 'Button',
            attributes =
            {
                class="topLeftButtons" ,
                fontSize=90 ,
                fontStyle="Bold" ,
                width=100 ,
                height=100 ,
                rectAlignment="UpperLeft" ,
                color="#eeeeee",
            },
          },

          -- top bar title
          {
            tag = 'Text',
            attributes =
            {
                class="WindowTitle"  ,
                text="Mod Wizard" ,
                fontSize=90 ,
                height=100 ,
                fontStyle="Bold" ,
                rectAlignment="UpperCenter" ,
                color="#FFFFFF" ,
            },
          },


          -- a single mod
          -- window
          {
            tag = 'Panel',
            attributes =
            {
                class="modWindow"  ,
                width=2150 ,
                height=1000 ,
                rectAlignment="UpperCenter" ,
                color="#69696940" ,
                outline="#404040",
            },
          },

          --modValue
          {
            tag = 'InputField',
            attributes =
            {
                class='modValue' ,
                fontSize=95 ,
                width=4000 ,
                height=2250 ,
                rectAlignment="UpperLeft",
            },
          },

          -- modTopBar
          {
            tag = 'Panel',
            attributes =
            {
                class="modTopBar"  ,
                height=100 ,
                width=2150 ,
                rectAlignment="UpperCenter" ,
                color="#19197040" ,
                outline="#00008B",
            },
          },

          -- modWindowTitle
          {
            tag = 'Text',
            attributes =
            {
                class="modWindowTitle" ,
                text="Operative's Edge" ,
                fontSize=95 ,
                height=100 ,
                fontStyle="Bold" ,
                rectAlignment="UpperCenter" ,
                color="#FFFFFF",
            },
          },


        },
      },

      -- Window (the big one)
      {
        tag = 'Panel',
        attributes =
        {
          class="Window" ,
          id="Window",
          width=2250 ,
          height=4280 ,
          offsetXY = '-280 -1' ,
        },
        children =
        {

          -- Panel: TopBar
          {
            tag = 'Panel',
            attributes =
            {
              class="TopBar" ,
              id="TopBar",
            },
          },

          -- Text: WindowTitle
          {
            tag = 'Text',
            attributes =
            {
              id="WindowTitle",
              class="WindowTitle",
              offsetXY="0 0",
            },
          },

          -- Button: minimizeButton
          {
            tag = 'Button',
            attributes =
            {
              id="minimizeButton",
              class="topRightButtons",
              textColor="#000000",
              text="_",
              offsetXY="-140 0",
              onClick="minimizeModWizard",
            },
          },

          -- Button: closeButton
          {
            tag = 'Button',
            attributes =
            {
              id="closeButton",
              class="topRightButtons",
              color="#990000",
              textColor="#FFFFFF",
              text="X",
              offsetXY="0 0",
              onClick="close",
            },
          },

          -- Button: addButton
          {
            tag = 'Button',
            attributes =
            {
              id="addButton",
              class="topLeftButtons",
              color="#FFE966",
              textColor="#000000",
              text="+",
              offsetXY="0 0",
              onClick="addMod",
            },
          },

          -- Button: uploadButton
          {
            tag = 'Button',
            attributes =
            {
              id="uploadButton",
              class="topLeftButtons",
              textColor="#000000",
              color="#E9FF66",
              text='^',
              offsetXY="140 0",
              onClick="uploadMods",
            },
          },

        },
      },
      -- </Window>
    },

    -- <modWindowBase> (one of the small ones) >>>>>>>>>>>>>>>
    modWindowBase = {
      tag = 'Panel',
      attributes =
      {
        class="modWindow",
        id="modWindow1",
        offsetXY='0 -20',
      },
      children =
      {

        -- modTopBar
        {
          tag = 'Panel',
          attributes = {
            class="modTopBar",
            id="modTopBar1",
            color = '#5b78ba',
          },
        },

        -- modWindowTitle
        {
          tag = 'InputField',
          attributes = {
            textColor='#FFFFFF',
            fontStyle='Bold',
            alignment='MiddleCenter',
            color='#5b78ba',
            offsetXY="0 0",
            fontSize=75 ,
            width=1575 ,
            height=100 ,
            rectAlignment="UpperCenter",
            id="modValue1",
            onEndEdit='modTextChanged',
          },
        },

        -- minimizeButton
        {
          tag = 'Button',
          attributes = {
            id="minimizeButton1",
            class="topRightButtons",
            textColor="#000000",
            text="_",
            offsetXY="-140 0",
            onClick="minimizeMod",
          },
        },

        -- closeButton
        {
          tag = 'Button',
          attributes = {
            id="closeButtonHAHA",
            class="topRightButtons",
            color="#990000",
            textColor="#FFFFFF",
            text="X",
            offsetXY="0 0",
            onClick="closeMod",
          },
        },

        -- Button: addButton
        {
          tag = 'Button',
          attributes =
          {
            id="modAddButton1",
            class="topLeftButtons",
            color="#FFE966",
            textColor="#000000",
            text="+",
            offsetXY="0 0",
            onClick="addEffect",
          },
        },

        -- ToggleButton
        {
          tag = 'Toggle',
          attributes = {
            id='modToggle1',
            scale='5 5',
            offsetXY='-480 325',
            rectAlignment='LowerRight',
            isOn = true,
            onValueChanged='modToggled',
          }
        }

      },
    },
    -- <modEffectBase> (one of the smallest bits) >>>>>>>>>>>>>>>>
    -- effect modifier
    modEffectBase = {
      tag = 'InputField',
      attributes = {
        id = 'modEffectValue1.1',
        fontSize=95 ,
        width=200 ,
        height=120 ,
        rectAlignment="UpperLeft",
        text='+5',
        offsetXY='0 -120',
        onEndEdit='modTextChanged',
      },
      children = {
        {
          -- effect type
          tag = 'InputField',
          attributes = {
            id = 'modEffectType1.1',
            fontSize=95 ,
            width=600 ,
            height=120 ,
            rectAlignment="UpperLeft",
            text='circumstance',
            offsetXY='210 0',
            onEndEdit='modTextChanged',
            },
          },

        {
        -- effect attribute
        tag = 'InputField',
        attributes = {
          id = 'modEffectAttribute1.1',
          fontSize=95 ,
          width=1200 ,
          height=120 ,
          rectAlignment="UpperLeft",
          text='advancedMeleeAttackRolls',
          offsetXY='820 0',
          onEndEdit='modTextChanged',
          },
        },

        -- remove effect
        {
          tag = 'Button',
          attributes =
          {
            id="modEffectCloseButton1.1",
            class="topRightButtons",
            color="#990000",
            textColor="#FFFFFF",
            text="X",
            offsetXY="1950 0",
            width = '120',
            height = '120',
            onClick="closeEffect",
          },
        },


      },
    },

    modWizard = {
    },

    -- a list of mods that are currently in currentConditions
    -- written in the form: Operative's Edge = true
    modBorderPatrol = {
    },
    -- list of current mods
    modList = {
      {
        open = true,
        name = "Operative's Edge",
        effects = {
          skills = 'bi3',
          INIT = 'bi3',
        },
      },

      {
        open = true,
        name = "Techlore",
        effects = {
          computers = 'bi2',
          mysticism = 'bi2',
        },
      },
    }
}

attributeGroups = {
  STATS = {'STATS'},
  STR = {'STR', 'STATS'},
  DEX = {'DEX', 'STATS'},
  CON = {'CON', 'STATS'},
  INT = {'INT', 'STATS'},
  WIS = {'WIS', 'STATS'},
  CHA = {'CHA', 'STATS'},

  MODS = {'MODS'},
  STRMOD = {'STRMOD', 'STATMODS'},
  DEXMOD = {'DEXMOD', 'STATMODS'},
  CONMOD = {'CONMOD', 'STATMODS'},
  INTMOD = {'INTMOD', 'STATMODS'},
  WISMOD = {'WISMOD', 'STATMODS'},
  CHAMOD = {'CHAMOD', 'STATMODS'},

  checks = {'checks'},
  STRChecks = {'STRChecks', 'checks'},
  DEXChecks = {'DEXChecks', 'checks'},
  CONChecks = {'CONChecks', 'checks'},
  INTChecks = {'INTChecks', 'checks'},
  WISChecks = {'WISChecks', 'checks'},
  CHAChecks = {'CHAChecks', 'checks'},

  abilityChecks = {'abilityChecks'},
  STRAbilityChecks = {'STRAbilityChecks', 'STRChecks', 'checks'},
  DEXAbilityChecks = {'DEXAbilityChecks', 'DEXChecks', 'checks'},
  CONAbilityChecks = {'CONAbilityChecks', 'CONChecks', 'checks'},
  INTAbilityChecks = {'INTAbilityChecks', 'INTChecks', 'checks'},
  WISAbilityChecks = {'WISAbilityChecks', 'WISChecks', 'checks'},
  CHAAbilityChecks = {'CHAAbilityChecks', 'CHAChecks', 'checks'},

  skills = {'skills', 'checks'},
  STRSkills = {'STRSkills', 'STRChecks', 'skills', 'checks'},
  athletics = {'athletics', 'STRSkills', 'STRChecks', 'skills', 'checks'},

  DEXSkills = {'DEXSkills', 'DEXChecks', 'skills', 'checks'},
  acrobatics = {'acrobatics', 'DEXSkills', 'DEXChecks', 'skills', 'checks'},
  acrobaticsEscape = {'acrobaticsEscape', 'acrobatics', 'DEXSkills', 'DEXChecks', 'skills', 'checks'},
  piloting = {'piloting', 'DEXSkills', 'DEXChecks', 'skills', 'checks'},
  sleightOfHand = {'sleightOfHand', 'DEXSkills', 'DEXChecks', 'skills', 'checks'},
  stealth = {'stealth', 'DEXSkills', 'DEXChecks', 'skills', 'checks'},

  CONSkills = {'CONSkills', 'CONChecks', 'skills', 'checks'},

  INTSkills = {'INTSkills', 'INTChecks', 'skills', 'checks'},
  computers = {'computers', 'INTSkills', 'INTChecks', 'skills', 'checks'},
  culture = {'culture', 'INTSkills', 'INTChecks', 'skills', 'checks'},
  engineering = {'engineering', 'INTSkills', 'INTChecks', 'skills', 'checks'},
  lifeScience = {'lifeScience', 'INTSkills', 'INTChecks', 'skills', 'checks'},
  medicine = {'medicine', 'INTSkills', 'INTChecks', 'skills', 'checks'},
  physicalScience = {'physicalScience', 'INTSkills', 'INTChecks', 'skills', 'checks'},
  profession1 = {'profession1', 'INTSkills', 'INTChecks', 'skills', 'checks'},

  WISSkills = {'WISSkills', 'WISChecks', 'skills', 'checks'},
  mysticism = {'mysticism', 'WISSkills', 'WISChecks', 'skills', 'checks'},
  perception = {'perception', 'WISSkills', 'WISChecks', 'skills', 'checks'},
  perceptionSight = {'perceptionSight', 'perception', 'WISSkills', 'WISChecks', 'skills', 'checks'},
  perceptionHearing = {'perceptionHearing', 'perception', 'WISSkills', 'WISChecks', 'skills', 'checks'},
  profession2 = {'profession2', 'WISSkills', 'WISChecks', 'skills', 'checks'},
  senseMotive = {'senseMotive', 'WISSkills', 'WISChecks', 'skills', 'checks'},
  survival = {'survival', 'WISSkills', 'WISChecks', 'skills', 'checks'},

  CHASkills = {'CHASkills', 'CHAChecks', 'skills', 'checks'},
  bluff = {'bluff', 'CHASkills', 'CHAChecks', 'skills', 'checks'},
  diplomacy = {'diplomacy', 'CHASkills', 'CHAChecks', 'skills', 'checks'},
  disguise = {'disguise', 'CHASkills', 'CHAChecks', 'skills', 'checks'},
  intimidate = {'intimidate', 'CHASkills', 'CHAChecks', 'skills', 'checks'},

  AC = {'AC'},
  KAC = {'KAC', 'AC'},
  RKAC = {'RKAC', 'KAC', 'AC'},
  MKAC = {'MKAC', 'KAC', 'AC'},
  EAC = {'EAC', 'AC'},
  RKAC = {'RKAC', 'EAC', 'AC'},
  MKAC = {'MKAC', 'EAC', 'AC'},

  maxDEX = {'maxDEX'},

  attackRolls = {'attackRolls'},
  spellAttackRolls = {'spellAttackRolls', 'attackRolls'},
  weaponAttackRolls = {'weaponAttackRolls', 'attackRolls'},
  meleeAttackRolls = {'meleeAttackRolls', 'weaponAttackRolls', 'attackRolls'},
  basicMeleeAttackRolls = {'basicMeleeAttackRolls', 'meleeAttackRolls', 'weaponAttackRolls', 'attackRolls'},
  advancedMeleeAttackRolls = {'advancedMeleeAttackRolls', 'meleeAttackRolls', 'weaponAttackRolls', 'attackRolls'},
  rangedAttackRolls = {'rangedAttackRolls', 'weaponAttackRolls', 'attackRolls'},
  smallArmAttackRolls = {'smallArmAttackRolls', 'rangedAttackRolls', 'weaponAttackRolls', 'attackRolls'},
  longarmAttackRolls = {'longarmAttackRolls', 'rangedAttackRolls', 'weaponAttackRolls', 'attackRolls'},
  heavyWeaponAttackRolls = {'heavyWeaponAttackRolls', 'rangedAttackRolls', 'weaponAttackRolls', 'attackRolls'},
  sniperAttackRolls = {'sniperAttackRolls', 'rangedAttackRolls', 'weaponAttackRolls', 'attackRolls'},
  thrownAttackRolls = {'thrownAttackRolls', 'rangedAttackRolls', 'weaponAttackRolls', 'attackRolls'},

  attackDamage = {'attackDamage'},
  spellDamage = {'spellDamage', 'attackDamage'},
  weaponDamage = {'weaponDamage', 'attackDamage'},
  meleeDamage = {'meleeDamage', 'weaponDamage', 'attackDamage'},
  basicMeleeDamage = {'basicMeleeDamage', 'meleeDamage', 'weaponDamage', 'attackDamage'},
  advancedMeleeDamage = {'advancedMeleeDamage', 'meleeDamage', 'weaponDamage', 'attackDamage'},
  rangedDamage = {'rangedDamage', 'weaponDamage', 'attackDamage'},
  smallArmDamage = {'smallArmDamage', 'rangedDamage', 'weaponDamage', 'attackDamage'},
  longarmDamage = {'longarmDamage', 'rangedDamage', 'weaponDamage', 'attackDamage'},
  heavyWeaponDamage = {'heavyWeaponDamage', 'rangedDamage', 'weaponDamage', 'attackDamage'},
  sniperDamage = {'sniperDamage', 'rangedDamage', 'weaponDamage', 'attackDamage'},
  thrownDamage = {'thrownDamage', 'rangedDamage', 'weaponDamage', 'attackDamage'},

  combatManeuvers = {'combatManeuvers', 'attackRolls'},
  bullRush = {'bullRush', 'combatManeuvers', 'attackRolls'},
  dirtyTrick = {'dirtyTrick', 'combatManeuvers', 'attackRolls'},
  disarm = {'disarm', 'combatManeuvers', 'attackRolls'},
  grapple = {'grapple', 'combatManeuvers', 'attackRolls'},
  reposition = {'reposition', 'combatManeuvers', 'attackRolls'},
  sunder = {'sunder', 'combatManeuvers', 'attackRolls'},
  trip = {'trip', 'combatManeuvers', 'attackRolls'},

  CMD = {'CMD'},
  bullRushD = {'bullRushD', 'CMD'},
  dirtyTrickD = {'dirtyTrickD', 'CMD'},
  disarmD = {'diarmD', 'CMD'},
  grappleD = {'grappleD', 'CMD'},
  repositionD = {'repositionD', 'CMD'},
  sunderD = {'sunderD', 'CMD'},
  tripD = {'tripD', 'CMD'},

  saves = {'saves'},
  FORT = {'FORT', 'saves'},
  REF = {'REF', 'saves'},
  WILL = {'WILL', 'saves'},

  encumberedBulk = {'encumberedBulk'},
  overburdenedBulk = {'overburdenedBulk'},

  DC = {'DC'},
  weaponDC = {'weaponDC', 'DC'},
  spellDC = {'spellDC', 'DC'},
  abilityDC = {'abilityDC', 'DC'},

  maxHP = {'maxHP'},
  HPPerLevel = {'HPPerLevel'},
  maxSP = {'maxSP'},
  SPPerLevel = {'SPPerLevel'},
  maxRP = {'maxRP'},
  ACP = {'ACP'},
  ranksPerLevel = {'ranksPerLevel'},
  casterLevel = {'casterLevel'},
  spellPenetration = {'spellPenetration'},
  speed = {'speed'},
  INIT = {'INIT'},
}

bonusTypeDecode = {
  c = 'circumstance',
  d = 'divine',
  e = 'enhancement',
  i = 'insight',
  l = 'luck',
  m = 'morale',
  r = 'racial',
  s = 'shield',
}

bonusTypeEncode = {
  circumstance = 'bc',
  divine = 'bd',
  enhancement = 'be',
  insight = 'bi',
  luck = 'bl',
  morale = 'bm',
  racial = 'br',
  shield = 'bs',

  untyped = '',
  replace = 'r',
  multiply = 'm',
}

-- for tracking ability origins
sources = {}


-- UI Stuff ================================================================= UI
function createModWizard()
  ref_buttonData.modWizard = ref_buttonData['modWizardBase']

  for x = 1, #ref_buttonData.modList do
    modWindowTemp = ref_buttonData['modWindowBase']

    local openedAbove = 0
    for o = 1, x-1 do
      if ref_buttonData.modList[o]['open'] == true then
        openedAbove = openedAbove + 1
      end
    end
    local setY = 150 + (x-1) * 150 + openedAbove * 750

    local setHeight = 850
    if ref_buttonData.modList[x]['open'] == false then
      setHeight = 100
    end

    modWindowTemp['attributes']['offsetXY'] = '0 -'..setY
    modWindowTemp['attributes']['height'] = setHeight
    modWindowTemp['attributes']['id'] = 'modWindow'..x
    modWindowTemp['children'][1]['attributes']['id'] = 'modTopBar'..x
    modWindowTemp['children'][2]['attributes']['id'] = 'modWindowTitle'..x
    modWindowTemp['children'][2]['attributes']['text'] = ref_buttonData.modList[x]['name']
    modWindowTemp['children'][3]['attributes']['id'] = 'modMinimizeButton'..x
    modWindowTemp['children'][4]['attributes']['id'] = 'modCloseButton'..x
    modWindowTemp['children'][5]['attributes']['id'] = 'modAddButton'..x
    modWindowTemp['children'][6]['attributes']['id'] = 'toggleButton'..x

    modWindowTemp['children'][6]['attributes']['offsetXY'] = '-480 325'
    if ref_buttonData.modList[x]['open'] == false then
      modWindowTemp['children'][6]['attributes']['offsetXY'] = '-480 -50'
    end

    -- This for loop cleans out the old one so no previous effects remain
    -- it removes every child (effect) after the default ones
    for y = childrenBeforeEffects + 1, #modWindowTemp['children'] do
      table.remove(modWindowTemp['children'], childrenBeforeEffects + 1)
    end

    -- Create effects >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    local modEffectTemp = ref_buttonData['modEffectBase']
    local effectsNo = 1

    for effect,value in pairs(ref_buttonData.modList[x]['effects']) do
      modEffectTemp['attributes']['offsetXY'] = '0 -'..120 + (effectsNo-1) * 125
      modEffectTemp['attributes']['id'] = 'modEffect'..x..','..effectsNo
      modEffectTemp['children'][1]['attributes']['id'] = 'modEffectType'..x..','..effectsNo
      modEffectTemp['children'][2]['attributes']['id'] = 'modEffectAttribute'..x..','..effectsNo
      modEffectTemp['children'][2]['attributes']['text'] = effect
      modEffectTemp['children'][3]['attributes']['id'] = 'modEffectCloseButton'..x..','..effectsNo

      if type(value) ~= 'string' then
        modEffectTemp['attributes']['text'] = value
        modEffectTemp['children'][1]['attributes']['text'] = 'untyped'
      elseif string.sub(value, 1, 1) == 'r' then
        modEffectTemp['attributes']['text'] = string.sub(value, 2)
        modEffectTemp['children'][1]['attributes']['text'] = 'replace'
      elseif string.sub(value, 1, 1) == 'm' then
        modEffectTemp['attributes']['text'] = string.sub(value, 2)
        modEffectTemp['children'][1]['attributes']['text'] = 'multiply'
      elseif string.sub(value, 1, 1) == 'b' then
        modEffectTemp['attributes']['text'] = string.sub(value, 3)
        modEffectTemp['children'][1]['attributes']['text'] = bonusTypeDecode[string.sub(value, 2, 2)]
      end

      modEffectTemp['attributes']['active'] = true
      if ref_buttonData.modList[x]['open'] == false then
        modEffectTemp['attributes']['active'] = false
      end

      self.setTable('modEffectTemp'..x..','..effectsNo, modEffectTemp)
      modWindowTemp['children'][effectsNo + childrenBeforeEffects] = self.getTable('modEffectTemp'..x..','..effectsNo)
      effectsNo = effectsNo + 1
    end

    -- setTable is required here or modWindowTemp will persist between iterations and all the mods will be the same
    self.setTable('modWindowTemp'..x, modWindowTemp)
    ref_buttonData.modWizard[2]['children'][x + childrenBeforeMods] = self.getTable('modWindowTemp'..x)

  end

  self.UI.setXmlTable(ref_buttonData.modWizard)
end

-- Mod Wizard Stuff >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
-- Function to minimize the window
function minimizeModWizard(player, value, id)
  -- Is the size of the window bigger than its top bar?
  if(tonumber(self.UI.getAttribute("Window", "Height")) > tonumber(self.UI.getAttribute("TopBar", "Height"))) then
    self.UI.setAttribute("Window","OffsetXY", "-320 -210") -- Offset is set to (Height - Height_of_Top_Bar) /2
    self.UI.setAttribute("Window", "Height", tonumber(self.UI.getAttribute("TopBar", "Height")))

    for x = 1, childrenBeforeMods do
      self.UI.hide('modWindow'..x)
    end

  else
    self.UI.setAttribute("Window","OffsetXY", "-320 -1")
    self.UI.setAttribute("Window", "Height", 4280)

    for x = 1, childrenBeforeMods do
      self.UI.show('modWindow'..x)
    end
  end
end
-- Function to close the window
function close(player, value, id)
    self.UI.hide("Window")
end
-- Function adds mod to modList then updates
function addMod()
  table.insert(ref_buttonData.modList, {
    open = true,
    name = "tester"..pointlessEffectIncrement,
    effects = {
      skills = 'bi1',
      INIT = 'bi1',
    },
  })
  pointlessEffectIncrement = pointlessEffectIncrement + 1
  createModWizard()
end
-- fatbutton = userInput, currentConditions += modList
function uploadMods()
  -- light down button
  self.UI.setAttributes('uploadButton', {
    color="#e0e0e0",
    text='O',
  })

  for i,mod in pairs(ref_buttonData.modList) do
    if ref_buttonData.modBorderPatrol[mod['name']] == nil then
      ref_buttonData.modBorderPatrol[mod['name']] = true

      ref_buttonData.currentConditions[mod['name']] = mod['name']
      ref_buttonData.conditionEffects[mod['name']] = {}

      for attribute, value in pairs(mod['effects']) do
        ref_buttonData.conditionEffects[mod['name']][attribute] = value
      end
    end
  end

  writeup()
end
-- Mod Stuff >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
function minimizeMod(player, value, id)
  -- id = modMinimizeButtonX (where X is an integer. it's also the 18th character, observed below)
  local number = tonumber(string.sub(id, 18))
  if ref_buttonData.modList[number]['open'] == true then
    ref_buttonData.modList[number]['open'] = false
    self.UI.setAttribute("modWindow"..number, "Height", 100)
    self.UI.setAttribute("toggleButton"..number, 'offsetXY', '-480 -50')

    for x = 1, #ref_buttonData.modWizard[2]['children'][number + childrenBeforeMods]['children'] - childrenBeforeEffects do
      self.UI.hide('modEffect'..number..','..x)
    end
  else
    ref_buttonData.modList[number]['open'] = true
    self.UI.setAttribute("modWindow"..number, "Height", 850)
    self.UI.setAttribute("toggleButton"..number, 'offsetXY', '-480 325')

    for x = 1, #ref_buttonData.modWizard[2]['children'][number + childrenBeforeMods]['children'] - childrenBeforeEffects do
      self.UI.show('modEffect'..number..','..x)
    end
  end
  alignMods(number)
end
-- replaces mods after minimizing or deleting. aligns every mod after the input number
function alignMods(number)
  for x = number+1, #ref_buttonData.modList do
    local openedAbove = 0
    for o = 1, x-1 do
      if ref_buttonData.modList[o]['open'] == true then
        openedAbove = openedAbove + 1
      end
    end
    self.UI.setAttribute("modWindow"..x,"OffsetXY", "0 -"..150 + (x-1) * 150 + openedAbove * 750)
  end
end
-- Function to remove a mod
function closeMod(player, value, id)
  -- id = modCloseButtonX (where X is an integer. it's also the 15th character, observed below)
  local number = tonumber(string.sub(id, 15))
  ref_buttonData.modBorderPatrol[ref_buttonData.modList[number]['name']] = nil
  ref_buttonData.conditionEffects[ref_buttonData.modList[number]['name']] = nil
  ref_buttonData.currentConditions[ref_buttonData.modList[number]['name']] = nil

  table.remove(ref_buttonData.modWizard[2]['children'], number + childrenBeforeMods)
  table.remove(ref_buttonData.modList, number)

  createModWizard()
end
function addEffect(player, value, id)
  -- id = modAddButtonX (where X is modNumber. X is the 13th character)
  local modNo = tonumber(string.sub(id, 13))
  ref_buttonData.modList[modNo]['effects']['<attibute'..pointlessEffectIncrement..'>'] = 0
  pointlessEffectIncrement = pointlessEffectIncrement + 1
  createModWizard()
end
function modToggled(player, value, id)
  -- value = string of the toggle AFTER being interacted with
  -- id = toggleButtonX. X = modNo. X is the 13th character
  local modNo = tonumber(string.sub(id, 13))
  if value == 'False' then
    -- does 3 things: adds the mod to the blacklist, removes it from the conditions table, and removes it from current conditions
    ref_buttonData.modBorderPatrol[ref_buttonData.modList[modNo]['name']] = true
    ref_buttonData.conditionEffects[ref_buttonData.modList[modNo]['name']] = nil
    ref_buttonData.currentConditions[ref_buttonData.modList[modNo]['name']] = nil
  elseif value == 'True' then
    ref_buttonData.modBorderPatrol[ref_buttonData.modList[modNo]['name']] = nil
  end

  self.UI.setAttributes('uploadButton', {
    color="#E9FF66",
    text='^'})
end
-- effect stuff >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
function closeEffect(player, value, id)
  -- id = modEffectCloseButtonX,Y (where X is the modNo, Y is the effectNo)
  local mod, effect = string.sub(id, 21):match("([^,]+),([^,]+)")
  table.remove(ref_buttonData.modWizard[2]['children'][mod + childrenBeforeMods]['children'], effect + childrenBeforeEffects)
  ref_buttonData.modList[tonumber(mod)]['effects'][self.UI.getAttribute('modEffectAttribute'..mod..','..effect, 'text')] = nil
  createModWizard()
end
-- changes the uploadButton appearance and changes modList text
function modTextChanged(player, value, id)
  self.UI.setAttributes('uploadButton', {
    color="#E9FF66",
    text='^',
  })

  -- title change. eg. Moxie --> Lethal Grace
  if string.sub(id, 1, 14) == 'modWindowTitle' then
    local modNo = string.sub(id, 15)
    modNo = tonumber(modNo)
    ref_buttonData.modList[modNo]['name'] = value

  -- type change. eg. 10 (untyped) --> bd10 (divine)
  elseif string.sub(id, 1, 13) == 'modEffectType' then
    local modNo, effectNo = string.sub(id, 14):match("([^,]+),([^,]+)")
    modNo = tonumber(modNo)
    effectNo = tonumber(effectNo)

    if bonusTypeEncode[value] == nil then
      broadcastToAll('invalid type at mod #'..modNo..', effect #'..effectNo)
    else
      local attribute = ref_buttonData.modList[modNo]['effects'][self.UI.getAttribute('modEffectAttribute'..modNo..','..effectNo, 'text')]
      if type(tonumber(attribute)) == 'number' then
        if bonusTypeEncode[value] == "" then
          ref_buttonData.modList[modNo]['effects'][self.UI.getAttribute('modEffectAttribute'..modNo..','..effectNo, 'text')] = ref_buttonData.modList[modNo]['effects'][self.UI.getAttribute('modEffectAttribute'..modNo..','..effectNo, 'text')]
        else
          ref_buttonData.modList[modNo]['effects'][self.UI.getAttribute('modEffectAttribute'..modNo..','..effectNo, 'text')] = bonusTypeEncode[value]..ref_buttonData.modList[modNo]['effects'][self.UI.getAttribute('modEffectAttribute'..modNo..','..effectNo, 'text')]
        end
      elseif string.sub(attribute, 1, 1) == 'b' then
        if bonusTypeEncode[value] == "" then
          ref_buttonData.modList[modNo]['effects'][self.UI.getAttribute('modEffectAttribute'..modNo..','..effectNo, 'text')] = tonumber(string.sub(ref_buttonData.modList[modNo]['effects'][self.UI.getAttribute('modEffectAttribute'..modNo..','..effectNo, 'text')], 3))
        else
          ref_buttonData.modList[modNo]['effects'][self.UI.getAttribute('modEffectAttribute'..modNo..','..effectNo, 'text')] = bonusTypeEncode[value]..string.sub(ref_buttonData.modList[modNo]['effects'][self.UI.getAttribute('modEffectAttribute'..modNo..','..effectNo, 'text')], 3)
        end
      else
        if bonusTypeEncode[value] == "" then
          ref_buttonData.modList[modNo]['effects'][self.UI.getAttribute('modEffectAttribute'..modNo..','..effectNo, 'text')] = tonumber(string.sub(ref_buttonData.modList[modNo]['effects'][self.UI.getAttribute('modEffectAttribute'..modNo..','..effectNo, 'text')], 2))
        else
          ref_buttonData.modList[modNo]['effects'][self.UI.getAttribute('modEffectAttribute'..modNo..','..effectNo, 'text')] = bonusTypeEncode[value]..string.sub(ref_buttonData.modList[modNo]['effects'][self.UI.getAttribute('modEffectAttribute'..modNo..','..effectNo, 'text')], 2)
        end
      end
    end

  -- attribute change. eg. speed --> attackRolls
  elseif string.sub(id, 1, 18) == 'modEffectAttribute' then
    local modNo, effectNo = string.sub(id, 19):match("([^,]+),([^,]+)")
    modNo = tonumber(modNo)
    effectNo = tonumber(effectNo)

    -- print(ref_buttonData.modList[modNo]['effects'][value])
    local lastAttribute = ref_buttonData.modWizard[2]['children'][modNo + childrenBeforeMods]['children'][effectNo + childrenBeforeEffects]['children'][2]['attributes']['text']
    if lastAttribute == value then
      -- print('no change.')
    else
      ref_buttonData.modList[modNo]['effects'][value] = ref_buttonData.modList[modNo]['effects'][lastAttribute]
      ref_buttonData.modList[modNo]['effects'][lastAttribute] = nil
      ref_buttonData.modWizard[2]['children'][modNo + childrenBeforeMods]['children'][effectNo + childrenBeforeEffects]['children'][2]['attributes']['text'] = value
      self.UI.setAttribute('modEffectAttribute'..modNo..','..effectNo, 'text', value)
    end

  -- this one has to go last because of overlapping names
  -- value change. eg. bc10 --> bc5
  elseif string.sub(id, 1, 9) == 'modEffect' then
    local modNo, effectNo = string.sub(id, 10):match("([^,]+),([^,]+)")
    modNo = tonumber(modNo)
    effectNo = tonumber(effectNo)

    local attribute = ref_buttonData.modList[modNo]['effects'][self.UI.getAttribute('modEffectAttribute'..modNo..','..effectNo, 'text')]
    if type(tonumber(attribute)) == 'number' then
      -- attribute = 7
      ref_buttonData.modList[modNo]['effects'][self.UI.getAttribute('modEffectAttribute'..modNo..','..effectNo, 'text')] = value
    elseif string.sub(attribute, 1, 1) == 'b' then
      -- attribute = 'bl20'
      ref_buttonData.modList[modNo]['effects'][self.UI.getAttribute('modEffectAttribute'..modNo..','..effectNo, 'text')] = string.sub(attribute, 1, 2)..value
    else
      -- attribute = 'r8'
      ref_buttonData.modList[modNo]['effects'][self.UI.getAttribute('modEffectAttribute'..modNo..','..effectNo, 'text')] = string.sub(attribute, 1, 1)..value
    end
  end
end

--Lua Stuff ================================================================ Lua
--Startup: loads save, spawns stuff >>>>>>>>>>>>>>>>>
function onload(saved_data)
    if disableSave==true then saved_data="" end
    if saved_data ~= "" then
        local loaded_data = JSON.decode(saved_data)
        ref_buttonData = loaded_data
    else
        ref_buttonData = defaultButtonData
    end

    childrenBeforeMods = #defaultButtonData.modWizardBase[2]['children']
    childrenBeforeEffects = #defaultButtonData.modWindowBase['children']
    -- print(childrenBeforeMods)
    -- print(childrenBeforeEffects)
    assignMode = 0

    pointlessEffectIncrement = 100

    spawnedButtonCount = 0
    createCheckbox()
    createTextbox()
    createButton()
    fatbutton()
    createMajorButton()
    createModWizard()

    self.editInput({index=154, value='MODS'})

    updateSave()
end
--Save function >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
function updateSave()
    c = ref_buttonData.currentConditions
    c = tagEffects(c)
    updateOutputBasic()
    updateOutputBoxes()
    updateHealthBars()

    writeup()

    saved_data = JSON.encode(ref_buttonData)
    if disableSave==true then saved_data="" end
    self.script_state = saved_data
end

-- Calculate and Update text boxes ================================== text boxes
-- Calculate the outputs
function updateOutputBasic()
    -- Time to update those stats and things!
  -- Update base stats
  STR = effectCalc(c, 'STR', self.getInputs()[1]['value'])
  DEX = effectCalc(c, 'DEX', self.getInputs()[2]['value'])
  CON = effectCalc(c, 'CON', self.getInputs()[3]['value'])
  INT = effectCalc(c, 'INT', self.getInputs()[4]['value'])
  WIS = effectCalc(c, 'WIS', self.getInputs()[5]['value'])
  CHA = effectCalc(c, 'CHA', self.getInputs()[6]['value'])

  -- Update dem stat mods
  STRMOD = effectCalc(c, 'STRMOD', math.floor((STR - 10)/ 2))
  DEXMOD = effectCalc(c, 'DEXMOD', math.floor((DEX - 10)/ 2))
  CONMOD = effectCalc(c, 'CONMOD', math.floor((CON - 10)/ 2))
  INTMOD = effectCalc(c, 'INTMOD', math.floor((INT - 10)/ 2))
  WISMOD = effectCalc(c, 'WISMOD', math.floor((WIS - 10)/ 2))
  CHAMOD = effectCalc(c, 'CHAMOD', math.floor((CHA - 10)/ 2))

  -- statModRef & statModStringRef are helper funtions used in a few places. Do not touch!
  statModRef = {STRMOD, DEXMOD, CONMOD, INTMOD, WISMOD, CHAMOD}
  statModStringRef = {STR = STRMOD, DEX = DEXMOD, CON = CONMOD, INT = INTMOD, WIS = WISMOD, CHA = CHAMOD}

  -- Update dem KAC, EAC, Initiative and CMD
  maxDEX = effectCalc(c, 'maxDEX', self.getInputs()[125]['value'])
  -- KAC and EAC have been split in half for clarity.
  KAC = effectCalc(c, 'KAC', self.getInputs()[124]['value'])
  EAC = effectCalc(c, 'EAC', self.getInputs()[123]['value'])
  KAC = 10 + KAC + math.min(DEXMOD, effectCalc(c, 'maxDEX', maxDEX))
  EAC = 10 + EAC + math.min(DEXMOD, effectCalc(c, 'maxDEX', maxDEX))
  INIT = effectCalc(c, 'INIT', DEXMOD)
  CMD = effectCalc(c, 'CMD', KAC + 8)

  -- Update dem SAVES + define LVL
  -- for each save, see if it is a good save or bad save and calculate.
  -- the save formula is SAVE = min(LVL/(3 - bool) + 2 * bool + STATMOD

  LVL = self.getInputs()[75]['value']
  goodFORT = boolToInt(ref_buttonData.checkbox[23].state)
  goodREF = boolToInt(ref_buttonData.checkbox[24].state)
  goodWILL = boolToInt(ref_buttonData.checkbox[25].state)
  FORT = effectCalc(c, 'FORT', math.floor(LVL/(3 - goodFORT)) + 2 * goodFORT + CONMOD)
  REF = effectCalc(c, 'REF', math.floor(LVL/(3 - goodREF)) + 2 * goodREF + DEXMOD)
  WILL = effectCalc(c, 'WILL', math.floor(LVL/(3 - goodWILL)) + 2 *goodWILL + WISMOD)


  -- Update dem BAB, attack bonuses
  BAB = math.floor(LVL * 3/4 + (LVL/4) * boolToInt(ref_buttonData.checkbox[22].state))
  meleeAttackBonus = effectCalc(c, 'meleeAttackRolls', BAB + STRMOD)
  rangedAttackBonus = effectCalc(c, 'rangedAttackRolls', BAB + DEXMOD)
  thrownAttackBonus = effectCalc(c, 'thrownAttackRolls', BAB + STRMOD)

  function assessProficiency(number)
    if string.sub(self.getInputs()[151]['value'], number * 2 - 1, number * 2 - 1) == 'N' then
      return 1
    elseif string.sub(self.getInputs()[151]['value'], number * 2 - 1, number * 2 - 1) == 'P' then
      return 0
    elseif string.sub(self.getInputs()[151]['value'], number * 2 - 1, number * 2 - 1) == 'S' then
      return 0
    else
      broadcastToAll('proficiency calc error')
    end
  end

  basicMeleeAttackRolls = effectCalc(c, 'basicMeleeAttackRolls', BAB + STRMOD - assessProficiency(1) * 4)
  advancedMeleeAttackRolls = effectCalc(c, 'advancedMeleeAttackRolls', BAB + STRMOD - assessProficiency(2) * 4)
  smallArmAttackRolls = effectCalc(c, 'smallArmAttackRolls', BAB + DEXMOD - assessProficiency(3) * 4)
  longarmAttackRolls = effectCalc(c, 'longarmAttackRolls', BAB + DEXMOD - assessProficiency(4) * 4)
  heavyWeaponAttackRolls = effectCalc(c, 'heavyWeaponAttackRolls', BAB + DEXMOD - assessProficiency(5) * 4)
  sniperAttackRolls = effectCalc(c, 'sniperAttackRolls', BAB + DEXMOD - assessProficiency(6) * 4)

  function assessSpecialisation(number)
    if string.sub(self.getInputs()[151]['value'], number * 2 - 1, number * 2 - 1) == 'N' then
      return 0
    elseif string.sub(self.getInputs()[151]['value'], number * 2 - 1, number * 2 - 1) == 'P' then
      return 0
    elseif string.sub(self.getInputs()[151]['value'], number * 2 - 1, number * 2 - 1) == 'S' then
      return 1
    else
      broadcastToAll('specialisation calc error')
    end
  end

  basicMeleeDamage = effectCalc(c, 'basicMeleeDamage', STRMOD + assessSpecialisation(1) * LVL)
  advancedMeleeDamage = effectCalc(c, 'advancedMeleeDamage', STRMOD + assessSpecialisation(2) * LVL)
  smallArmDamage = effectCalc(c, 'smallArmDamage', assessSpecialisation(3) * math.floor(LVL * 0.5))
  longarmDamage = effectCalc(c, 'longarmDamage', assessSpecialisation(4) * LVL)
  heavyWeaponDamage = effectCalc(c, 'heavyWeaponDamage', assessSpecialisation(5) * LVL)
  sniperDamage = effectCalc(c, 'sniperDamage', assessSpecialisation(6) * LVL)


  -- Update dem max sp/hp/rp + keySTAT
  SPPerLevel = effectCalc(c, 'SPPerLevel', self.getInputs()[67]['value'] + CONMOD)
  HPPerLevel = effectCalc(c, 'HPPerLevel', self.getInputs()[67]['value'])
  maxSP = effectCalc(c, 'maxSP', SPPerLevel * LVL)
  maxHP = effectCalc(c, 'maxHP', HPPerLevel * LVL + self.getInputs()[69]['value'])
  keySTAT = statModStringRef[self.getInputs()[149]['value']]
  maxRP = effectCalc(c, 'maxRP', math.max(math.floor(LVL / 2) + keySTAT, 1))


  -- Update DCs
  spellDC = effectCalc(c, 'spellDC', keySTAT + 10)
  abilityDC = effectCalc(c, 'abilityDC', math.floor(LVL / 2) + keySTAT + 10)


  -- Update dem skills + ACP
  -- this assumes that no effects are capable of changing skill ranks
  -- (i swear ta god)
  function calculateSkills(skill, stat)
    if ref_buttonData.checkbox[skill].state == true  and tonumber(self.getInputs()[skill + 23]['value']) ~= 0 then
      return self.getInputs()[skill + 23]['value'] + statModRef[stat] + 3
    else
      return self.getInputs()[skill + 23]['value'] + statModRef[stat]
    end
  end

  ACP = effectCalc(c, 'ACP', self.getInputs()[126]['value'])
  acrobatics = effectCalc(c, 'acrobatics', calculateSkills(1, 2) + ACP)
  athletics = effectCalc(c, 'athletics', calculateSkills(2, 1) + ACP)
  bluff = effectCalc(c, 'bluff', calculateSkills(3, 6))
  computers = effectCalc(c, 'computers', calculateSkills(4, 4))
  culture = effectCalc(c, 'culture', calculateSkills(5, 4))
  diplomacy = effectCalc(c, 'diplomacy', calculateSkills(6, 6))
  disguise = effectCalc(c, 'disguise', calculateSkills(7, 6))
  engineering = effectCalc(c, 'engineering', calculateSkills(8, 4))
  intimidate = effectCalc(c, 'intimidate', calculateSkills(9, 6))
  lifeScience = effectCalc(c, 'lifeScience', calculateSkills(10, 4))
  medicine = effectCalc(c, 'medicine', calculateSkills(11, 4))
  mysticism = effectCalc(c, 'mysticism', calculateSkills(12, 5))
  perception = effectCalc(c, 'perception', calculateSkills(13, 5))
  physicalScience = effectCalc(c, 'physicalScience', calculateSkills(14, 4))
  piloting = effectCalc(c, 'piloting', calculateSkills(15, 2))
  profession1 = effectCalc(c, 'profession1', calculateSkills(16, 4))
  profession2 = effectCalc(c, 'profession2', calculateSkills(17, 5))
  senseMotive = effectCalc(c, 'senseMotive', calculateSkills(18, 5))
  sleightOfHand = effectCalc(c, 'sleightOfHand', calculateSkills(19, 2) + ACP)
  stealth = effectCalc(c, 'stealth', calculateSkills(20, 2) + ACP)
  survival = effectCalc(c, 'survival', calculateSkills(21, 5))

  speed = effectCalc(c, 'speed', self.getInputs()[79]['value'])

  -- Update dem Ranks
  ranks = 0
  for i = 24,44,1 do
    ranks = ranks + self.getInputs()[i]['value']
  end
  ranksPerLevel = effectCalc(c, 'ranksPerLevel', self.getInputs()[71]['value'] + INTMOD)
  totalRanks = ranks .. "/" .. tostring(ranksPerLevel * LVL)
end
-- Set all the textboxes
function updateOutputBoxes()
  function tooltip(attribute)
    local stat = tostring(attribute)
    return(stat..': '..sources[stat]['initial']..'[initial]'..sources[stat]['working'])
  end

  self.editInput({index=141, value=STR..' : '..STRMOD,
  tooltip=tooltip('STR')..'\n'..tooltip('STRMOD')})
  self.editInput({index=142, value=DEX..' : '..DEXMOD,
  tooltip=tooltip('DEX')..'\n'..tooltip('DEXMOD')})
  self.editInput({index=143, value=CON..' : '..CONMOD,
  tooltip=tooltip('CON')..'\n'..tooltip('CONMOD')})
  self.editInput({index=144, value=INT..' : '..INTMOD,
  tooltip=tooltip('INT')..'\n'..tooltip('INTMOD')})
  self.editInput({index=145, value=WIS..' : '..WISMOD,
  tooltip=tooltip('WIS')..'\n'..tooltip('WISMOD')})
  self.editInput({index=146, value=CHA..' : '..CHAMOD,
  tooltip=tooltip('CHA')..'\n'..tooltip('CHAMOD')})

  self.editInput({index=6, value=KAC, tooltip=tooltip('KAC')})
  self.editInput({index=7, value=EAC, tooltip=tooltip('EAC')})
  self.editInput({index=8, value=INIT, tooltip=tooltip('INIT')})
  self.editInput({index=9, value=CMD, tooltip=tooltip('CMD')})


  self.editInput({index=10, value=FORT, tooltip=tooltip('FORT')})
  self.editInput({index=11, value=REF, tooltip=tooltip('REF')})
  self.editInput({index=12, value=WILL, tooltip=tooltip('WILL')})
  self.editInput({index=13, value=BAB})


  self.editInput({index=17, value=maxSP, tooltip=tooltip('maxSP')..'\n'..tooltip('SPPerLevel')})
  self.editInput({index=19, value=maxHP, tooltip=tooltip('maxHP')..'\n'..tooltip('HPPerLevel')})
  self.editInput({index=22, value=maxRP, tooltip=tooltip('maxRP')})

  self.editInput({index=14, value=meleeAttackBonus, tooltip=tooltip('meleeAttackRolls')})
  self.editInput({index=15, value=rangedAttackBonus, tooltip=tooltip('rangedAttackRolls')})
  self.editInput({index=16, value=thrownAttackBonus, tooltip=tooltip('thrownAttackRolls')})

  self.editInput({index=152, value=spellDC..' + spell level', tooltip=tooltip('spellDC')})
  self.editInput({index=153, value=abilityDC, tooltip=tooltip('abilityDC')})

  self.editInput({index=44, value=acrobatics, tooltip=tooltip('acrobatics')})
  self.editInput({index=45, value=athletics, tooltip=tooltip('athletics')})
  self.editInput({index=46, value=bluff, tooltip=tooltip('bluff')})
  self.editInput({index=47, value=computers, tooltip=tooltip('computers')})
  self.editInput({index=48, value=culture, tooltip=tooltip('culture')})
  self.editInput({index=49, value=diplomacy, tooltip=tooltip('diplomacy')})
  self.editInput({index=50, value=disguise, tooltip=tooltip('disguise')})
  self.editInput({index=51, value=engineering, tooltip=tooltip('engineering')})
  self.editInput({index=52, value=intimidate, tooltip=tooltip('intimidate')})
  self.editInput({index=53, value=lifeScience, tooltip=tooltip('lifeScience')})
  self.editInput({index=54, value=medicine, tooltip=tooltip('medicine')})
  self.editInput({index=55, value=mysticism, tooltip=tooltip('mysticism')})
  self.editInput({index=56, value=perception, tooltip=tooltip('perception')})
  self.editInput({index=57, value=physicalScience, tooltip=tooltip('physicalScience')})
  self.editInput({index=58, value=piloting, tooltip=tooltip('piloting')})
  self.editInput({index=59, value=profession1, tooltip=tooltip('profession1')})
  self.editInput({index=60, value=profession2, tooltip=tooltip('profession2')})
  self.editInput({index=61, value=senseMotive, tooltip=tooltip('senseMotive')})
  self.editInput({index=62, value=sleightOfHand, tooltip=tooltip('sleightOfHand')})
  self.editInput({index=63, value=stealth, tooltip=tooltip('stealth')})
  self.editInput({index=64, value=survival, tooltip=tooltip('survival')})

  self.editInput({index=151, value="->"..speed, tooltip=tooltip('speed')})

  self.editInput({index=149, value=totalRanks, tooltip=tooltip('ranksPerLevel')})
end
-- converts raw input conditions into effective table
function tagEffects(effectsList)
  effects = ref_buttonData.conditionEffects
  taggedEffects = {}

  -- test if condition is already in the list
  -- adds conditions via the 'true' tag
  for i,condition in pairs(effectsList) do
    -- print('\n'..condition..' volunteers as tribute.')
    if taggedEffects[condition] == nil then
      -- print('taggedEffects has a new effect: '..condition)
      taggedEffects[condition] = true

      -- test if condition wants to apply more conditions, then see if they are in the list
      if effects[condition]['other'] ~= nil then
        for j, additionalCondition in pairs(effects[condition]['other']) do
          if additionalCondition ~= nil then
            -- print(condition..' also wants to add the effect '..additionalCondition)
            if taggedEffects[additionalCondition] == nil then
              -- print('Accepted!')
              taggedEffects[additionalCondition] = true
            else
              -- print('Rejected!')
            end
          end
        end
      end

      -- test if condition wants to quash, then label all conditions to be quashed with the 'false' tag
      if effects[condition]['quashes'] ~= nil then
        for k, quashedCondition in pairs(effects[condition]['quashes']) do
          -- print(condition..' is now quashing '..quashedCondition..'!')
          -- This bit is useless, by the way, but it tells you when the quashing does something.
          -- if taggedEffects[quashedCondition] ~= nil then
          --   print(condition..' quashed '..quashedCondition..' from taggedEffects!')
          -- end
          -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
          taggedEffects[quashedCondition] = false
        end
      end
    else
      -- print('taggedEffects already has '..condition)
    end
  end

  -- removes all quashed conditions via the 'false' tag
  for taggedCondition, legitimate in pairs(taggedEffects) do
    if legitimate == false then
      -- print('Since '..taggedCondition..' was quashed, it will now be removed.')
      taggedEffects[taggedCondition] = nil
    end
  end

  return taggedEffects
end
-- note, if let initial = false, then effectCalc will only calculate addition mods
function effectCalc(conditions, stat, initial)
  effects = ref_buttonData.conditionEffects
  total = 0
  replacements = {}
  multiplications = {}
  bonuses = {}

  sources[stat] = {initial = initial, working = ""}
  -- print('Looking for '..stat..' effecting conditions')
  if initial ~= false then
    -- print('Initial is '..initial)
  end
  for i,possibleStat in pairs(attributeGroups[stat]) do
    -- print(stat..' could be listed as '..possibleStat)
    for condition, j in pairs(conditions) do
      -- print('Looking for things effecting '..possibleStat..' in '..condition)
      if type(effects[condition][possibleStat]) == 'number' then
        -- print(possibleStat..' is penalised by '..condition..'!')
        total = total + effects[condition][possibleStat]
        sources[stat]['working'] = sources[stat]['working']..effects[condition][possibleStat]..'['..condition..']'
        -- print('Current Total Bonus is '..total)
      elseif type(effects[condition][possibleStat]) == 'string' then
        if string.sub(effects[condition][possibleStat], 1, 1) == 'r' then
          -- print(condition..' wants to replace '..possibleStat..'... add it to the replacements list.')
          table.insert(replacements, string.sub(effects[condition][possibleStat], 2))
        elseif string.sub(effects[condition][possibleStat], 1, 1) == 'm'then
          -- print(condition..' wants to multiply '..possibleStat)
          table.insert(multiplications, string.sub(effects[condition][possibleStat], 2))
        elseif string.sub(effects[condition][possibleStat], 1, 1) == 'b' then
          -- print(condition..' wants to apply a '..bonusTypeDecode[string.sub(effects[condition][possibleStat], 2, 2)]..'bonus to '..possibleStat)

          if bonuses[string.sub(effects[condition][possibleStat], 2, 2)] == nil then
            -- print('adding '..string.sub(effects[condition][possibleStat], 2, 2)..' category')
            bonuses[string.sub(effects[condition][possibleStat], 2, 2)] = {}
          end

          bonuses[string.sub(effects[condition][possibleStat], 2, 2)][condition] = tonumber(string.sub(effects[condition][possibleStat], 3))
          -- print('bonuses['..string.sub(effects[condition][possibleStat], 2, 2)..']['..condition..'] = '..tonumber(string.sub(effects[condition][possibleStat], 3)))

        end
      end
    end
  end
  -- print('Calculated Total Bonus for '..stat..' is '..total)
  if initial ~= false then
    total = total + initial
    -- print('Calculated Total Result for '..stat..' is '..total)

    for type,v in pairs(bonuses) do
      bonusMax = 'KILL ME'
      for source,value in pairs(v) do
        if bonusMax == 'KILL ME' then
          bonusMax = {source, value}
        else
          if bonusMax[2] < 0 then
            bonusMax = {source, value}
          end
        end
      end
      bonuses[type] = bonusMax
      total = total + tonumber(bonuses[type][2])
      sources[stat]['working'] = sources[stat]['working']..bonuses[type][2]..'['..bonusTypeDecode[type]..' ('..bonuses[type][1]..')]'
    end

    -- print('\nThere are '..#multiplications..' multiplications waiting')
    if #multiplications > 0 then
      sources[stat]['working'] = sources[stat]['working']..')'
    end
    for i,v in pairs(multiplications) do
      total = total * v
      sources[stat]['working'] = sources[stat]['working']..' * '..v
    end

    -- print('Multiplied Total Result for '..stat..' is '..total)

    -- print('\nThere are '..#replacements..' replacements waiting')

    table.insert(replacements, total)
    total = math.min(table.unpack(replacements))
    if #replacements > 1 then
      sources[stat]['working'] = ' -> '..total..'[replaced]'
    end
  else
    -- print('Warning: no "initial" attribute given. Multiplications and Replacements ignored.')
  end

  -- print('Final Total Result for '..stat..' is '..total..'\nWorking: '..initial..'[initial]'..sources[stat]['working']..'\n')
  return total
end

-- Update Health Bars ============================================== figurine HP
-- Set health bars
function updateHealthBars()
  if ref_buttonData.assignment['assignedFigure'] ~= "" then
    healthFraction = self.getInputs()[21]['value'] / maxHP
    healthFraction5 = math.min(self.getInputs()[21]['value'] / maxHP * 5)*2
    healthFractionAt = ""
    for n =1,healthFraction5-1 do
      healthFractionAt = healthFractionAt.."@ "
    end
    healthFractionAt = healthFractionAt.."@"

    staminaFraction = self.getInputs()[19]['value'] / maxSP
    staminaFraction5 = math.min(self.getInputs()[19]['value'] / maxSP * 5)*2
    staminaFractionAt = ""
    for n =1,staminaFraction5-1 do
      staminaFractionAt = staminaFractionAt.."@ "
    end
    staminaFractionAt = staminaFractionAt.."@"

    getObjectFromGUID(ref_buttonData.assignment['assignedFigure']).editButton({index=0, label=healthFractionAt, width=1750*healthFraction})
    getObjectFromGUID(ref_buttonData.assignment['assignedFigure']).editButton({index=1, label=staminaFractionAt, width=1750*staminaFraction})
  end
end
-- Update conditions writeup =========================================== writeup
function writeup()
  local modWriteup = 'CONDITIONS LIST\n'
  for i,condition in pairs(ref_buttonData.currentConditions) do
    modWriteup = modWriteup..condition..'\n'
    for attribute,value in pairs(ref_buttonData.conditionEffects[condition]) do
      if attribute == 'other' then
        modWriteup = modWriteup..attribute..' = '
        for j,additional in pairs(value) do
          modWriteup = modWriteup..additional..'/'
        end
        modWriteup = modWriteup..'\n'
      else
        modWriteup = modWriteup..attribute..' = '..value..'\n'
      end
    end
    modWriteup = modWriteup..'\n'
  end
  self.editInput({index=154, value=modWriteup})
end

--Click functions ======================================================== click
--Checks or unchecks the given box
function click_checkbox(tableIndex, buttonIndex)
    if ref_buttonData.checkbox[tableIndex].state == true then
        ref_buttonData.checkbox[tableIndex].state = false
        self.editButton({index=buttonIndex, label=""})

        -- turn condition off
        if tableIndex >= 26 and tableIndex <= 57 then
          ref_buttonData.currentConditions[ref_buttonData.checkbox[tableIndex].label] = nil
        end
    else
        ref_buttonData.checkbox[tableIndex].state = true
        self.editButton({index=buttonIndex, label=string.char(10008)})

        -- turn condition on
        if tableIndex >= 26 and tableIndex <= 57 then
          ref_buttonData.currentConditions[ref_buttonData.checkbox[tableIndex].label] = ref_buttonData.checkbox[tableIndex].label
        end
    end
    -- updateSave()
end
--Updates saved value for given text box
function click_textbox(i, value, selected)
    if selected == false then
        ref_buttonData.textbox[i].value = value
        -- updateSave()
    end
end
--Print out the modifier for a skill check
function skill_button(skill_name)
  -- updateSave()
  if string.sub(skill_name, 1, 6) == 'weapon' then
    local weaponNo = tonumber(string.sub(skill_name, 7)) - 1
    broadcastToAll(self.getInputs()[73]['value']..' rolls an attack with '..self.getInputs()[87 + 10 * weaponNo]['value']..' with a modifier of '.. _G[self.getInputs()[94 + 10 * weaponNo]['value']..'AttackRolls'])
    broadcastToAll('Working: '..sources[self.getInputs()[94 + 10 * weaponNo]['value']..'AttackRolls']['initial']..'[initial]'..sources[self.getInputs()[94 + 10 * weaponNo]['value']..'AttackRolls']['working']..'\n')
    broadcastToAll('The attack deals '.. self.getInputs()[89 + 10 * weaponNo]['value']..'+'.._G[self.getInputs()[94 + 10 * weaponNo]['value']..'Damage']..' '..self.getInputs()[90 + 10 * weaponNo]['value']..' damage.')
    broadcastToAll('Working: '..sources[self.getInputs()[94 + 10 * weaponNo]['value']..'Damage']['initial']..'[initial]'..sources[self.getInputs()[94 + 10 * weaponNo]['value']..'Damage']['working']..'\n')

  else
    broadcastToAll(self.getInputs()[73]['value']..' rolls a '..skill_name..' check with a '.._G[skill_name]..' modifier!')
    broadcastToAll('Working: '..sources[skill_name]['initial']..'[initial]'..sources[skill_name]['working']..'\n')
  end
end
-- junk function
function click_figure()
end

-- click Major Buttons >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
function open_mod_wizard()
  self.UI.show('Window')
end
function update_all()
  updateSave()
end
function set_player(obj, player_color)
  ref_buttonData.assignment['assignedPlayer'] = player_color
  self.editInput({index=83, value=ref_buttonData.assignment['assignedPlayer']})
  assignMode = 0
  broadcastToColor("Sheet has been assigned to "..ref_buttonData.assignment['assignedPlayer'].."!\n", ref_buttonData.assignment['assignedPlayer'], ref_buttonData.assignment['assignedPlayer'])
end
function set_figure(obj, player_color)
  if player_color ~= ref_buttonData.assignment['assignedPlayer'] and ref_buttonData.assignment['assignedPlayer'] ~= "" then
    broadcastToColor("This isn't your character sheet. No touching.", player_color, player_color)
  elseif assignMode ~= 2 then
    if ref_buttonData.assignment['assignedPlayer'] == "" then
      broadcastToAll('Cannot assign figurine without assigning Player.\nassignMode: None\n')
      assignMode = 0
    else
      broadcastToColor("assignMode: Figure to Sheet\nThe next object "..ref_buttonData.assignment['assignedPlayer'].." picks up will be assigned as their figurine!\nPick up the character sheet to deselect current figurine.\nClick again to cancel.\n",
      ref_buttonData.assignment['assignedPlayer'], ref_buttonData.assignment['assignedPlayer'])
      assignMode = 2
    end
  elseif assignMode == 2 then
    broadcastToColor('Cancelled.\nassignMode: None\n', ref_buttonData.assignment['assignedPlayer'], ref_buttonData.assignment['assignedPlayer'])
    assignMode = 0
  end
end
-- works with set_player() and set_figure
function onObjectPickUp(player_color, picked_up_object)
  if picked_up_object ~= self and assignMode == 2 and player_color == ref_buttonData.assignment['assignedPlayer'] then
    -- if there's already a figure, deselect it before continuing
    if ref_buttonData.assignment['assignedFigure'] ~= "" then
      for n = 0,1 do
        getObjectFromGUID(ref_buttonData.assignment['assignedFigure']).removeButton(n)
      end
      ref_buttonData.assignment['assignedFigure'] = ""
    end

    ref_buttonData.assignment['assignedFigure'] = picked_up_object.getGUID()
    assignMode = 0
    broadcastToColor("Figure has been assigned to object "..picked_up_object.getGUID()..'\n', ref_buttonData.assignment['assignedPlayer'], ref_buttonData.assignment['assignedPlayer'])

    -- make the HP/SP/THP bars
    colors = {
      {0.2,0.8,0.2},
      {0.2,0.2,0.8},
      {0.9,0.9,0.1}
    }
    for n = 1,2 do
      getObjectFromGUID(ref_buttonData.assignment['assignedFigure']).createButton({
          label="@ @ @ @ @ @ @ @ @ @", click_function="click_figure", function_owner=self,
          position={0, (2 + n * 0.3), 0}, height=175, width=1750,
          font_size=150, rotation={90,180,0},
          color=colors[n], font_color={1,1,1}, tooltip=""
        })
    end
  elseif picked_up_object == self and assignMode == 2 and ref_buttonData.assignment['assignedFigure'] ~= "" and player_color == ref_buttonData.assignment['assignedPlayer']then
    for n = 0,1 do
      getObjectFromGUID(ref_buttonData.assignment['assignedFigure']).removeButton(n)
    end
    ref_buttonData.assignment['assignedFigure'] = ""
    broadcastToColor("Figure unassigned.\n", ref_buttonData.assignment['assignedPlayer'], ref_buttonData.assignment['assignedPlayer'])
    assignMode = 0
  end
end

-- Stuff creation ===================================================== spawning
--Makes checkboxes
function createCheckbox()
    for i, data in ipairs(ref_buttonData.checkbox) do
        --Sets up reference function
        local buttonNumber = spawnedButtonCount
        local funcName = "checkbox"..i
        local func = function() click_checkbox(i, buttonNumber) end
        self.setVar(funcName, func)
        --Sets up label
        local label = ""
        if data.state==true then label=string.char(10008) end
        --Creates button and counts it
        self.createButton({
            label="", click_function=funcName, function_owner=self,
            position=data.pos, height=data.size, width=data.size,
            font_size=data.size, scale=buttonScale,
            color=buttonColor, font_color=buttonFontColor, tooltip=data.label
        })
        spawnedButtonCount = spawnedButtonCount + 1
    end
end
function createTextbox()
    for i, data in ipairs(ref_buttonData.textbox) do
        function editableColor(number)
          if number == 1 then
            return {r=1,g=1,b=1}
          else
            return {r=0.9, g=0.9, b=0.9}
          end
        end

        --Sets up reference function
        local funcName = "textbox"..i
        local func = function(_,_,val,sel) click_textbox(i,val,sel) end
        self.setVar(funcName, func)

        self.createInput({
            input_function = funcName,
            function_owner = self,
            label          = data.label,
            alignment      = data.alignment,
            position       = data.pos,
            scale          = buttonScale,
            width          = data.width,
            height         = (data.font_size*data.rows)+24,
            font_size      = data.font_size,
            color          = editableColor(data.editable),
            font_color     = buttonFontColor,
            value          = data.value,
            tooltip        = data.label
        })


    end
end
function createButton()
  for i, data in ipairs(ref_buttonData.button) do
    local buttonNumber = spawnedButtonCount
    local funcName = "skillbutton"..i
    local func = function() skill_button(data.label) end
    self.setVar(funcName, func)
    button_parameters = {
      click_function = funcName,
      function_owner  = self,
      label = data.label,
      position = data.pos,
      rotation = data.rot,
      height = 40,
      width = 40,
      font_size = 1,
      tooltip = data.label,
      color = {r=0.9,g=0.9,b=1}
    }
    self.createButton(button_parameters)
    spawnedButtonCount = spawnedButtonCount + 1
  end
end
function createMajorButton()
  for i, data in ipairs(ref_buttonData.majorButton) do
    button_parameters = {
      click_function = data.func,
      function_owner  = self,
      label = data.label,
      position = data.pos,
      rotation = data.rot,
      height = data.size,
      width = data.size,
      font_size = data.font_size,
      tooltip = data.label
    }
    self.createButton(button_parameters)
  end
end
-- spawns the mod thing on the back
function fatbutton()
  -- !! Back test !!
  param2 = {
      input_function = 'click_figure',
      function_owner = self,
      rotation  = {0, 0, 180},
      position  = {0, -0.1, 0},
      width     = 1500,
      height    = 2000,
      font_size = 30,
      label     = "",
      value     = 'mods',
      alignment = 3
  }
  self.createInput(param2)
end


-- Bonus functions ======================================================= bonus
function boolToInt(bool)
  if bool == true then return 1
  elseif bool == false then return 0
  end
end